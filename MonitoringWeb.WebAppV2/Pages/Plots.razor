@page "/plot"
@using MonitoringData.Infrastructure.Services.DataAccess
@using System.Drawing
@using MonitoringWeb.WebAppV2.Data
@inject PlotDataService PlotService
@inject SettingsService SettingsService

<h3 align="center">H2 Plots</h3>
<DxStackLayout Orientation="@Orientation.Vertical">
    <Items>
        <DxStackLayoutItem>
            <Template>
                <div>
                   <DxFormLayout CssClass="w-100">
                       <DxFormLayoutItem Caption="Device" ColSpanLg="12">
                           <DxComboBox Data="@this.DeviceLookup.Select(e=>e.Key).AsEnumerable()"
                            @bind-Value="@SelectedDevice"
                            CssClass="cw-480" />
                       </DxFormLayoutItem>
                        <DxFormLayoutGroup Caption="Start DateTime" ColSpanMd="6">
                            <DxFormLayoutItem Caption="Start Date" ColSpanMd="12">
                                <DxDateEdit @bind-Date="@StartDate" TimeSectionVisible="true" CssClass="cw-320" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                        <DxFormLayoutGroup Caption="Stop DateTime" ColSpanMd="6">
                            <DxFormLayoutItem Caption="Stop Date" ColSpanMd="12">
                                <DxDateEdit @bind-Date="@StopDate" TimeSectionVisible="true" CssClass="cw-320" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </div>
                <div style="padding:1rem">
                    <DxButton Click="@Submit" RenderStyle="ButtonRenderStyle.Primary" 
                        RenderStyleMode="ButtonRenderStyleMode.Contained" 
                        Text="Fetch Plot" />
                </div>
            </Template>
        </DxStackLayoutItem>
        <DxStackLayoutItem Length="6fr">
            <Template>
                <div style="padding:1rem">
                    @if (this.PlotData == null) {
                        <h2 style="align-content:center">@Message</h2>
                    } else {
                      <DxChart Data="@PlotData"
                                 Width="100%"
                                 Height="100%">
                            <DxChartLegend AllowToggleSeries="true"
                                           Orientation="Orientation.Vertical"
                                           HorizontalAlignment="HorizontalAlignment.Right">
                                <DxChartTitle Text="Detectors"> </DxChartTitle>
                            </DxChartLegend>
                            <DxChartCommonSeries NameField="@((AnalogReadingDto r)=>r.Name)"
                                                 ArgumentField="@((AnalogReadingDto r)=>r.TimeStamp)"
                                                 ValueField="@((AnalogReadingDto r)=>(int)r.Value)">
                                <SeriesTemplate Context="settings">
                                    <DxChartLineSeries Settings="@settings">
                                        <DxChartSeriesLabel Visible="false" />
                                        <DxChartSeriesPoint Visible="true"/>
                                        <DxChartAggregationSettings Enabled="true"
                                                                    Method="ChartAggregationMethod.Max"/>
                                    </DxChartLineSeries>
                                </SeriesTemplate>
                            </DxChartCommonSeries>
                            <DxChartArgumentAxis>
                                <DxChartAxisRange StartValue="@PlotStart"
                                                  EndValue="@PlotStop" />
                            </DxChartArgumentAxis>
                            <DxChartValueAxis>
                                <DxChartAxisRange StartValue="0" EndValue="1000"></DxChartAxisRange>
                                <DxChartAxisTitle Text="PPM" />
                                <DxChartConstantLine Value="100" Width="3" Color="Color.GreenYellow">
                                    <DxChartConstantLineLabel Text="Soft-Warn"
                                                              VerticalAlignment="VerticalAlignment.Center"
                                                              Position="RelativePosition.Inside" />
                                </DxChartConstantLine>
                                <DxChartConstantLine Value="500" Width="3" Color="Color.Yellow">
                                    <DxChartConstantLineLabel Text="Warning"
                                                              VerticalAlignment="VerticalAlignment.Center"
                                                              Position="RelativePosition.Inside" />
                                </DxChartConstantLine>
                                <DxChartConstantLine Value="1000" Width="3" Color="Color.Red">
                                    <DxChartConstantLineLabel Text="Alarm"
                                                              VerticalAlignment="VerticalAlignment.Center"
                                                              Position="RelativePosition.Inside" />
                                </DxChartConstantLine>
                            </DxChartValueAxis>
                            <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"/>
                            <DxChartScrollBarSettings ArgumentAxisScrollBarVisible="true"
                                                      ArgumentAxisScrollBarPosition="ChartScrollBarPosition.Bottom"/>
                            <DxChartTooltip Enabled="true" Position="RelativePosition.Outside" >
                                <div style="background-color: grey;">
                                    <div class="font-weight-bold">
                                        @(((DateTime)context.Point.Argument).ToLocalTime().ToString())
                                    </div>
                                    <div>
                                        Value$=@((context.Point.Value))
                                    </div>
                                </div>
                            </DxChartTooltip>
                        </DxChart>
                    }
                </div>
            </Template>
        </DxStackLayoutItem>
    </Items>
</DxStackLayout>

@code {
    IEnumerable<AnalogReadingDto>? PlotData { get; set; }
    Dictionary<string, string> DeviceLookup { get; set; } = new Dictionary<string, string>();
    string? SelectedDevice { get; set; }
    string? Message{ get; set; }
    DateTime StartDate { get; set; }
    DateTime StopDate { get; set; }

    DateTime PlotStart { get; set; }
    DateTime PlotStop { get; set; }

    protected override async Task OnInitializedAsync() {
        this.Message = "Select input parameters to view plot";
        var devices=await this.SettingsService.GetDevices();
        foreach (var device in devices) {
            this.DeviceLookup.Add(device.DeviceName,device.DatabaseName);
        }
        this.DeviceLookup.Add("Combined","combined");
        DateTime now = DateTime.Now.ToLocalTime();
        this.StartDate=now;
        this.StopDate = now;
        this.PlotStart = now;
        this.PlotStop = now;
        this.SelectedDevice = this.DeviceLookup.First().Key;
    }

    private async void Submit() {
        if (SelectedDevice is not null) {
            this.PlotData=null;
            this.Message = "Loading plot data, please wait...";
            await InvokeAsync(StateHasChanged);
            this.PlotStart = this.StartDate.ToLocalTime();
            this.PlotStop = this.StopDate.ToLocalTime();
            var start=this.StartDate;
            var stop = this.StopDate;
            if (this.SelectedDevice == "Combined"){
                this.PlotData = await this.PlotService.GetData(this.DeviceLookup.Select(e=>e.Value).ToList(),
                    start,stop);
            }else{
                this.PlotData = await this.PlotService.GetData(this.DeviceLookup[this.SelectedDevice],start,stop);
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}