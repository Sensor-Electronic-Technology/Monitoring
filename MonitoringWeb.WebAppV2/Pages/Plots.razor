@page "/plot"
@using DevExpress.Blazor
@using DevExpress.Blazor.Configuration
@using MonitoringData.Infrastructure.Services.DataAccess
@using System.Drawing
@inject PlotDataService PlotService

<h3 align="center">H2 Plots</h3>
<DxStackLayout Orientation="@Orientation.Vertical">
    <Items>
        <DxStackLayoutItem>
            <Template>
                <div>
                   <DxFormLayout CssClass="w-100">
                       <DxFormLayoutItem Caption="Device" ColSpanLg="12">
                           <DxComboBox Data="@Devices"
                            @bind-Value="@SelectedDevice"
                            CssClass="cw-480" />
                       </DxFormLayoutItem>
                        <DxFormLayoutGroup Caption="Start DateTime" ColSpanMd="6">
                            <DxFormLayoutItem Caption="Start Date" ColSpanMd="12">
                                <DxDateEdit @bind-Date="@StartDate" CssClass="cw-320" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Start Time" ColSpanMd="12">
                                <DxTimeEdit @bind-Time="@StartTime" CssClass="cw-320" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                        <DxFormLayoutGroup Caption="Stop DateTime" ColSpanMd="6">
                            <DxFormLayoutItem Caption="Stop Date" ColSpanMd="12">
                                <DxDateEdit @bind-Date="@StopDate" CssClass="cw-320" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Stop Time" ColSpanMd="12">
                                <DxTimeEdit @bind-Time="@StopTime" CssClass="cw-320" />
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </div>
                <div style="padding:1rem">
                    <DxButton Click="@Submit" RenderStyle="ButtonRenderStyle.Primary" 
                        RenderStyleMode="ButtonRenderStyleMode.Contained" 
                        Text="Submit" />
                </div>

            </Template>
        </DxStackLayoutItem>
        <DxStackLayoutItem Length="4fr">
            <Template>
                <div style="padding:1rem">
                    @if (this.PlotData == null) {
                        <h2 style="align-content:center">@Message</h2>
                    } else {
                      <DxChart Data="@PlotData"
                                 Width="100%"
                                 Height="100%">
                            <DxChartLegend AllowToggleSeries="true"
                                           Orientation="Orientation.Vertical"
                                           HorizontalAlignment="HorizontalAlignment.Right">
                                <DxChartTitle Text="Detectors"> </DxChartTitle>
                            </DxChartLegend>
                            <DxChartCommonSeries NameField="@((AnalogReadingDto r)=>r.Name)"
                                                 ArgumentField="@((AnalogReadingDto r)=>r.TimeStamp)"
                                                 ValueField="@((AnalogReadingDto r)=>(int)r.Value)">
                                <SeriesTemplate Context="settings">
                                    <DxChartLineSeries Settings="@settings">
                                        <DxChartSeriesLabel Visible="false" />
                                        <DxChartSeriesPoint Visible="true"/>
                                        <DxChartAggregationSettings Enabled="true"
                                                                    Method="ChartAggregationMethod.Max"/>
                                    </DxChartLineSeries>
                                </SeriesTemplate>
                            </DxChartCommonSeries>
                            <DxChartArgumentAxis>
                                <DxChartAxisRange StartValue="@this.StartDate.Add(this.StartTime).ToLocalTime()"
                                                  EndValue="@this.StopDate.Add(this.StopTime).ToLocalTime()" />
                            </DxChartArgumentAxis>
                            <DxChartValueAxis>
                                <DxChartAxisRange StartValue="0" EndValue="1000"></DxChartAxisRange>
                                <DxChartAxisTitle Text="PPM" />
                                <DxChartConstantLine Value="100" Width="3" Color="Color.GreenYellow">
                                    <DxChartConstantLineLabel Text="Soft-Warn"
                                                              VerticalAlignment="VerticalAlignment.Center"
                                                              Position="RelativePosition.Inside" />
                                </DxChartConstantLine>
                                <DxChartConstantLine Value="500" Width="3" Color="Color.Yellow">
                                    <DxChartConstantLineLabel Text="Warning"
                                                              VerticalAlignment="VerticalAlignment.Center"
                                                              Position="RelativePosition.Inside" />
                                </DxChartConstantLine>
                                <DxChartConstantLine Value="1000" Width="3" Color="Color.Red">
                                    <DxChartConstantLineLabel Text="Alarm"
                                                              VerticalAlignment="VerticalAlignment.Center"
                                                              Position="RelativePosition.Inside" />
                                </DxChartConstantLine>
                            </DxChartValueAxis>
                            <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"/>
                            <DxChartScrollBarSettings ArgumentAxisScrollBarVisible="true"
                                                      ArgumentAxisScrollBarPosition="ChartScrollBarPosition.Bottom"/>
                            <DxChartTooltip Enabled="true" Position="RelativePosition.Outside" >
                                <div style="background-color: grey;">
                                    <div class="font-weight-bold">
                                        @(((DateTime)context.Point.Argument).ToLocalTime().ToString())
                                    </div>
                                    <div>
                                        Value$=@((context.Point.Value))
                                    </div>
                                </div>
                            </DxChartTooltip>
                        </DxChart>
                    }
                </div>
            </Template>
        </DxStackLayoutItem>
    </Items>
</DxStackLayout>

@code {
    IEnumerable<AnalogReadingDto>? PlotData { get; set; }
    IEnumerable<string>? Devices { get; set; }
    string SelectedDevice { get; set; }
    string Message{ get; set; }
    DateTime StartDate { get; set; } 
    TimeSpan StartTime { get; set; } 

    DateTime StopDate { get; set; } 
    TimeSpan StopTime { get; set; } 

    protected override async Task OnInitializedAsync() {
        this.Message = "Select input parameters to view plot";
        DateTime now = DateTime.Now.ToLocalTime();
        this.StartDate=now;
        this.StopDate = now;
        this.StartTime = now.TimeOfDay;
        this.StopTime = now.TimeOfDay;
        this.Devices = new List<string>() {
            "epi1_data",
            "epi2_data",
            "gasbay_data",
            "combined"
        };
        this.SelectedDevice = this.Devices.First();
    }

    private async void Submit() {
        this.PlotData=null;
        this.Message = "Loading plot data, please wait...";
        await InvokeAsync(StateHasChanged);
        //DateTime start = this.StartDate.Date.Add(this.StartTime).AddHours(4);
        //DateTime stop = this.StopDate.Date.Add(this.StopTime).AddHours(4);
        DateTime start=this.StartDate.Date.Add(this.StartTime).ToUniversalTime();
        DateTime stop = this.StopDate.Date.Add(this.StopTime).ToUniversalTime();
        if (this.SelectedDevice == "combined"){
            var list = this.Devices.Where(e => e != "combined").ToList();
            this.PlotData = await this.PlotService.GetData(list,start,stop);
        }else{
            this.PlotData = await this.PlotService.GetData(this.SelectedDevice,start,stop);
        }
        await InvokeAsync(StateHasChanged);
    }
}