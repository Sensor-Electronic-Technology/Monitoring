@using Microsoft.AspNetCore.Components.Web
@namespace MonitoringWeb.WebAppV2.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/blazing_dark/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="MonitoringWeb.WebAppV2.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <link href="_content/DevExpress.Blazor/dx-blazor.bs5.css" rel="stylesheet" />
        <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.4.1.min.js"></script>
    
        <!-- DevExtreme themes -->
        <link rel="stylesheet" href="https://cdn3.devexpress.com/jslib/21.2.4/css/dx.common.css">
        <link rel="stylesheet" href="https://cdn3.devexpress.com/jslib/21.2.4/css/dx.light.css">
    
        <!-- DevExtreme library -->
        <script type="text/javascript" src="https://cdn3.devexpress.com/jslib/21.2.4/js/dx.all.js"></script>
        <script>
            var circularGauge;
            function renderDevExtremeControls(circularGaugeCssClass) {
                renderCircularGauge(`.${circularGaugeCssClass}`);
            }
    
            function renderCircularGauge(container) {            
                circularGauge = $(container).dxCircularGauge({
                    geometry: {
                        startAngle: 225,
                        endAngle: 315,
                    },
                    scale: {
                        startValue: 20,
                        endValue: 200,
                        tickInterval: 20,
                        minorTickInterval: 10,
                    },
                    valueIndicator: {
                      type: 'twoColorNeedle',
                      color: 'none',
                      secondFraction: 0.24,
                      secondColor: '#f05b41',
                    },
                    value: 40,
                    size: {
                      width: 260,
                    },
                  }).dxCircularGauge('instance');
            }
        </script>
</head>
<body>
    @{
        var isIEOrEdgeLegacy = Context.Request.Headers["User-Agent"]
            .Any(userAgent => userAgent.Contains("MSIE") || userAgent.Contains("Trident") || userAgent.Contains("Edge/"));
    }
    @if(isIEOrEdgeLegacy)
    {
        <component type="typeof(MonitoringWeb.WebAppV2.Shared.BrowserNotSupported)" render-mode="Static" />
    }
    else
    {
        @RenderBody()

        <div id="blazor-error-ui">
            <environment include="Staging,Production">
                An error has occurred. This application may no longer respond until reloaded.
            </environment>
            <environment include="Development">
                An unhandled exception has occurred. See browser dev tools for details.
            </environment>
            <a href="" class="reload">Reload</a>
            <a class="dismiss">🗙</a>
        </div>

        <script src="_framework/blazor.server.js"></script>
    }
</body>
</html>