@using MonitoringSystem.Shared.Data.EntityDtos
@using MonitoringSystem.Shared.Data
@using MonitoringWeb.WebAppV2.Services
@typeparam TItem
@implements IAsyncDisposable
@inject ConfigApiClient Client
@inject SelectionChanged<ChannelDto> SelectionChanged
@inject SelectionChanged<ModbusDeviceDto> SelectedDeviceChanged

@if (this.Alert == null) {
        <p>@this.Message</p>
} else {
    <div class="row" style="padding: 1rem">
        <EditForm Model="@Alert"
                  OnSubmit="@this.OnSubmit"
                  Context="EditFormContext">
            <DxFormLayout>
                <DxFormLayoutGroup CaptionPosition="CaptionPosition.Vertical">
                    <HeaderTemplate >
                        <div class="text-center">
                            Alert Edit
                        </div>
                    </HeaderTemplate>
                    <Items>
                        <DxFormLayoutItem Caption="@nameof(AnalogAlertDto.Name)" ColSpanMd="4">
                            <DxTextBox @bind-Text="@this.Alert.Name" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@nameof(AnalogAlertDto.BypassResetTime)" ColSpanMd="4">
                            <DxSpinEdit @bind-Value="@this.Alert.BypassResetTime" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@nameof(AnalogAlertDto.Enabled)" ColSpanMd="2">
                            <DxCheckBox @bind-Checked="@this.Alert.Enabled" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@nameof(AnalogAlertDto.Bypass)" ColSpanMd="2">
                            <DxCheckBox @bind-Checked="@this.Alert.Bypass" />
                        </DxFormLayoutItem>
                    </Items>
                </DxFormLayoutGroup>
                @if (typeof(TItem) != typeof(AnalogInputDto)) {
                    <DxFormLayoutGroup Caption="DiscreteLevel">
                        <DxFormLayoutItem Caption="@nameof(DiscreteLevelDto.TriggerOn)" ColSpanMd="4">
                            <DxComboBox Data="@this.DiscreteStates"
                                        @bind-Value="@this.DiscreteLevel.TriggerOn"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@nameof(DiscreteLevelDto.Enabled)" ColSpanMd="4">
                            <DxCheckBox @bind-Checked="@this.DiscreteLevel.Enabled"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@nameof(DiscreteLevelDto.Bypass)" ColSpanMd="4">
                            <DxCheckBox @bind-Checked="@this.DiscreteLevel.Bypass"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="@nameof(DiscreteLevelDto.BypassResetTime)" ColSpanMd="4">
                            <DxSpinEdit @bind-Value="@this.DiscreteLevel.BypassResetTime"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="DeviceAction">
                            <DxComboBox Data="@this.DeviceActions"
                                        @bind-Value="this.DiscreteLevel.DeviceActionId"
                                        TextFieldName="@nameof(DeviceActionDto.Name)"
                                        ValueFieldName="@nameof(DeviceActionDto.Id)"/>
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>
                }
                <DxFormLayoutItem ColSpanMd="6">
                    <Template>
                        <DxButton Text="Submit"
                                  CssClass="w-100"
                                  RenderStyle="ButtonRenderStyle.Primary"
                                  SubmitFormOnClick="true"/>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="6" >
                    <Template>
                        <DxButton Text="Cancel"
                                  CssClass="w-100"
                                  Click="@this.OnCancel"
                                  RenderStyle="ButtonRenderStyle.Primary"/>
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </div>
    @if (typeof(TItem) == typeof(AnalogInputDto)) {
        <div class="card" style="padding: 1rem">
            <h6 class="card-header text-center">
                Analog Alert Levels
            </h6>
            <div class="card-body">
                <DxGrid Data="@this.AnalogLevels"
                        KeyFieldName="Id"
                        ValidationEnabled="false"
                        EditModelSaving="AnalogLevelSaveHandler"
                        PopupEditFormCssClass="pw-800"
                        EditMode="GridEditMode.EditForm">
                    <Columns>
                        <DxGridCommandColumn Width="120px" NewButtonVisible="false" DeleteButtonVisible="false"/>
                        <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.Id)" Visible="false"/>
                        <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.SetPoint)"/>
                        <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.Enabled)"/>
                        <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.Bypass)"/>
                        <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.BypassResetTime)"/>
                        <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.ActionType)"/>
                    </Columns>
                    <EditFormTemplate Context="EditViewContext">
                        @{
                            var level = (AnalogLevelDto)EditViewContext.EditModel;
                        }
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="@nameof(AnalogLevelDto.SetPoint)" ColSpanSm="6">
                                <DxSpinEdit @bind-Value="@level.SetPoint"></DxSpinEdit>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="@nameof(AnalogLevelDto.Enabled)" ColSpanSm="6">
                                <DxCheckBox @bind-Checked="@level.Enabled"></DxCheckBox>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="@nameof(AnalogLevelDto.Bypass)" ColSpanSm="6">
                                <DxCheckBox @bind-Checked="@level.Bypass" ></DxCheckBox>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="@nameof(AnalogLevelDto.BypassResetTime)" ColSpanSm="6">
                                <DxSpinEdit @bind-Value="@level.BypassResetTime"></DxSpinEdit>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="DeviceAction">
                                <DxComboBox Data="@this.DeviceActions"
                                            @bind-Value="@level.DeviceActionId"
                                            TextFieldName="@nameof(DeviceActionDto.Name)"
                                            ValueFieldName="@nameof(DeviceActionDto.Id)"/>
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </EditFormTemplate>
                </DxGrid>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string? ChannelId { get; set; }

    string Message { get; set; } = "Select a channel";
    AlertDto? Alert { get; set; }
    IEnumerable<AnalogLevelDto>? AnalogLevels { get; set; }
    DiscreteLevelDto? DiscreteLevel { get; set; }
    IEnumerable<DeviceActionDto>? DeviceActions { get; set; }
    IEnumerable<DiscreteState>? DiscreteStates { get; set; }


    protected override async Task OnInitializedAsync() {
        this.SelectionChanged.OnChanged += this.SelectedChannelChangedHandler;
        this.SelectedDeviceChanged.OnChanged += this.SelectedDeviceChangeHandler;
        this.DiscreteStates = Enum.GetValues(typeof(DiscreteState))
            .OfType<DiscreteState>()
            .ToList();
        await this.Update();
    }

    private async Task Update() {
        if (this.ChannelId != null) {
            var deviceId = this.SelectionChanged?.SelectedItem?.ModbusDeviceId.ToString();
            this.DeviceActions = await this.Client.GetDeviceActions(deviceId);
            this.Alert = await this.Client.GetAlert(this.ChannelId);
            if (typeof(TItem)==typeof(AnalogInputDto)) {
                this.AnalogLevels = await this.Client.GetAnalogAlertLevels(this.Alert.Id.ToString());
            } else {
                this.DiscreteLevel = await this.Client.GetDiscreteAlertLevel(this.Alert.Id.ToString());
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task SelectedChannelChangedHandler() {
        this.ChannelId = this.SelectionChanged.SelectedItem?.Id.ToString();
        await this.Update();
        await InvokeAsync(StateHasChanged);
    }

    async Task SelectedDeviceChangeHandler() {
        this.Alert = null;
        this.ChannelId = null;
        await this.Update();
    }
    
    async Task AnalogLevelSaveHandler(GridEditModelSavingEventArgs e) {
        if (e.EditModel is AnalogLevelDto level) {
            await this.Client.UpdateAnalogLevel(level);
            await this.Update();
        } else {
            Console.WriteLine("Error: DataItem is not a AnalogLevel");
        }
    }
    
    async Task OnSubmit() {
        await this.Client.UpdateAlert(this.Alert);
        if (typeof(TItem)!=typeof(AnalogInputDto)) {
            if (this.DiscreteLevel != null) {
                await this.Client.UpdateDiscreteLevel(this.DiscreteLevel);
            }
        }
        this.Alert = null;
        this.ChannelId = null;
        await this.Update();
    }

    async Task OnCancel(MouseEventArgs e) {
        this.Alert = null;
        this.ChannelId = null;
        await this.Update();
    }

    public ValueTask DisposeAsync() {
        this.SelectionChanged.OnChanged -= this.SelectedChannelChangedHandler;
        this.SelectedDeviceChanged.OnChanged -= this.SelectedDeviceChangeHandler;
        return ValueTask.CompletedTask;
    }
}