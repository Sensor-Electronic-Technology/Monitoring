@using MonitoringSystem.Shared.Data
@using MonitoringSystem.Shared.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Runtime.CompilerServices
@using MonitoringWeb.WebAppV2.Data
@inject ILogger<LiveGrid> logger
@inject ActiveAlertService ActiveAlertService
@implements IAsyncDisposable
<div class="container">
    <h4>@DeviceName</h4>
    <p role="status">TimeStamp: @this._monitorData?.TimeStamp.ToLocalTime().ToString()</p>
    <div class="row">
        <h6>Analog Channels</h6>
        @if (this._monitorData == null) {
            <p><em>Loading...</em></p>
        } else {
            <DxGrid Data="@this._monitorData.analogData"
                    CssClass="my-class"
                    ShowAllRows=true
                    CustomizeElement="Grid_CustomizeElement">
                <Columns>
                    <DxGridDataColumn FieldName="Item"/>
                    <DxGridDataColumn FieldName="State"/>
                    <DxGridDataColumn FieldName="Value"/>
                </Columns>
            </DxGrid>
        }
    </div>
    <div class="row">
        <h6>Discrete Channels</h6>
        @if (this._monitorData == null) {
            <p><em>Loading...</em></p>
        } else {
            <DxGrid Data="@this._monitorData.discreteData" CssClass="my-class"
                    ShowAllRows=true
                    CustomizeElement="Grid_CustomizeElement">
                <Columns>
                    <DxGridDataColumn FieldName="Item"/>
                    <DxGridDataColumn FieldName="State"/>
                    <DxGridDataColumn FieldName="Value"/>
                </Columns>
            </DxGrid>
        }
    </div>
    <div class="row">
        <h6>Virtual Channels</h6>
        @if (this._monitorData == null) {
            <p><em>Loading...</em></p>
        } else {
            <DxGrid Data="@this._monitorData.virtualData"
                    title="Virtual Channels"
                    CssClass="my-class"
                    ShowAllRows=true
                    CustomizeElement="Grid_CustomizeElement">
                <Columns>
                    <DxGridDataColumn FieldName="Item"/>
                    <DxGridDataColumn FieldName="State"/>
                    <DxGridDataColumn FieldName="Value"/>
                </Columns>
            </DxGrid>
        }
    </div>
</div>
@code {
   // [Parameter]
    [Parameter]
    public string? Hub { get; set; }
    [Parameter]
    public string? DeviceName { get; set; }
    
    private HubConnection? _hubConnection;
    private MonitorData? _monitorData;

    protected override async Task OnInitializedAsync() {
        this._hubConnection = new HubConnectionBuilder()
            .WithAutomaticReconnect()
            .WithUrl(this.Hub)
            .Build();
        /*this._hubConnection.On<MonitorData>("ShowCurrent",async (data) => {
            this._monitorData = data;
            await InvokeAsync(StateHasChanged);
        });*/
        this._hubConnection.On<MonitorData>("ShowCurrent",data => {
            this._monitorData = data;
            this._monitorData.analogData.Where(e => e.State.Contains("Alarm") 
                                                    || e.State.Contains("Warning") 
                                                    || e.State.Contains("SoftWarn"));
            InvokeAsync(StateHasChanged);
        });
        this._hubConnection.HandshakeTimeout = new TimeSpan(0,0,3);
        this._hubConnection.ServerTimeout = new TimeSpan(0, 0, 3);

        try {
            await this._hubConnection.StartAsync();
            //await InvokeAsync(StateHasChanged);
            this.logger.LogInformation(this.Hub+" Connected");
        } catch {
            this.logger.LogError(this.Hub+" hub connection failed");
        }
    }
    
    void Grid_CustomizeElement(GridCustomizeElementEventArgs e) {
        if(e.ElementType == GridElementType.DataRow && (String)e.Grid.GetRowValue(e.VisibleIndex, "State")==ActionType.Alarm.ToString()) {
            e.CssClass = "alarm-item";
        }
        if(e.ElementType == GridElementType.DataRow && (String)e.Grid.GetRowValue(e.VisibleIndex, "State")==ActionType.Warning.ToString()) {
            e.CssClass = "alarm-item";
        }
    }
    public async ValueTask DisposeAsync() {
        if (this._hubConnection is not null) {
            await this._hubConnection.DisposeAsync();
        }
    }
}