@using MonitoringSystem.Shared.Data.EntityDtos
@using MonitoringWeb.ConfigTesting.Services
@inject ConfigApiClient Client
<DxFormLayout>
    <DxFormLayoutItem>
        @if (this.ChannelType == typeof(AnalogInputDto)) {
            <DxTextBox Text="@((Alert as AnalogAlertDto)?.Name)"></DxTextBox>
        }else if (this.ChannelType == typeof(DiscreteInputDto) || this.ChannelType == typeof(VirtualInputDto)) {
            <DxTextBox Text="@((Alert as DiscreteAlertDto)?.Name)"></DxTextBox>
        }
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Alert Levels">
        <DxGrid Data="@this.AlertLevels">
            <Columns>
                @if (this.ChannelType == typeof(AnalogInputDto)) {
                    <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.Id)"/>
                    <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.SetPoint)"/>
                    <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.Bypass)"/>
                    <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.Enabled)"/>
                    <DxGridDataColumn FieldName="@nameof(AnalogLevelDto.BypassResetTime)"/>
                }else if (this.ChannelType == typeof(DiscreteInputDto) || this.ChannelType == typeof(VirtualInputDto)) {
                    <DxGridDataColumn FieldName="@nameof(DiscreteLevelDto.Id)"/>
                    <DxGridDataColumn FieldName="@nameof(DiscreteLevelDto.TriggerOn)"/>
                    <DxGridDataColumn FieldName="@nameof(DiscreteLevelDto.Bypass)"/>
                    <DxGridDataColumn FieldName="@nameof(DiscreteLevelDto.Enabled)"/>
                    <DxGridDataColumn FieldName="@nameof(DiscreteLevelDto.BypassResetTime)"/>
                }
            </Columns>
        </DxGrid>
    </DxFormLayoutItem>
</DxFormLayout>

@code {
    [Parameter]
    public Type ChannelType { get; set; }
    
    [Parameter]
    public ChannelDto Channel { get; set; }
    
    object Alert { get; set; }
    object AlertLevels { get; set; }

    protected override async Task OnInitializedAsync() {
        
    }
}