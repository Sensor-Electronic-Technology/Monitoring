@using MonitoringSystem.Shared.Data.EntityDtos
@using MonitoringWeb.ConfigTesting.Services
@inject ConfigApiClient Client

<DxGrid Data="@Sensors"
        KeyFieldName="Id"
        ValidationEnabled="false"
        AllowSelectRowByClick="true"
        SelectionMode="GridSelectionMode.Single"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        PopupEditFormCssClass="pw-800"
        EditMode="GridEditMode.EditForm">
    <Columns>
        <DxGridCommandColumn Width="120px" NewButtonVisible="false" DeleteButtonVisible="false"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Id)" Visible="false"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Name)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.DisplayName)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Description)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Slope)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Offset)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.YAxisMin)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.YAxisMax)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Units)"/>
        <DxGridDataColumn FieldName="@nameof(SensorDto.Factor)"/>    
        <DxGridDataColumn FieldName="@nameof(SensorDto.RecordThreshold)"/>
    </Columns>
    <EditFormTemplate Context="EditFormContext">
        @{
            var sensor = EditFormContext.EditModel as SensorDto;
        }
        <DxFormLayout>
            <DxFormLayoutGroup Caption="General">
                <DxFormLayoutItem Caption="@nameof(SensorDto.Name)">
                    <DxTextBox @bind-Text="sensor.Name"></DxTextBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@nameof(SensorDto.DisplayName)">
                    <DxTextBox @bind-Text="sensor.DisplayName"></DxTextBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@nameof(SensorDto.Description)">
                    <DxTextBox @bind-Text="sensor.Description"></DxTextBox>
                </DxFormLayoutItem>
            </DxFormLayoutGroup>
            <DxFormLayoutGroup Caption="Conversion">
                <DxFormLayoutItem Caption="@nameof(SensorDto.Slope)">
                    <DxSpinEdit @bind-Value="sensor.Slope"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@nameof(SensorDto.Offset)">
                    <DxSpinEdit @bind-Value="sensor.Offset"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@nameof(SensorDto.Factor)">
                    <DxSpinEdit @bind-Value="sensor.Factor"></DxSpinEdit>
                </DxFormLayoutItem>
            </DxFormLayoutGroup>
            <DxFormLayoutGroup Caption="Display Settings">
                <DxFormLayoutItem Caption="@nameof(SensorDto.YAxisMin)">
                    <DxSpinEdit @bind-Value="sensor.YAxisMin"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@nameof(SensorDto.YAxisMax)">
                    <DxSpinEdit @bind-Value="sensor.YAxisMax"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@nameof(SensorDto.Units)">
                    <DxTextBox @bind-Text="sensor.Units"></DxTextBox>
                </DxFormLayoutItem>
            </DxFormLayoutGroup>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {
    IEnumerable<SensorDto>? Sensors { get; set; }

    protected override async Task OnInitializedAsync() {
        this.Sensors = await this.Client.GetSensors();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
    //await this.DataService.UpdateModbusDevice((ModbusDeviceDto)e.DataItem,(ModbusDeviceDto)e.EditModel);
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e) {
    //await NwindDataService.RemoveEmployeeAsync((EditableEmployee)e.DataItem);
    //await UpdateDataAsync();
    }
}