@using MonitoringSystem.Shared.Data.LogModel
@using MonitoringSystem.Shared.Services
@using Microsoft.AspNetCore.SignalR.Client
@using MonitoringSystem.Shared.Data.SettingsModel
@using MonitoringSystem.Shared.SignalR
@using MathNet.Numerics
@using MathNet.Numerics.Statistics
@using MonitoringWeb.WebApp.Data
@using MonitoringWeb.WebApp.Hubs
@using MonitoringWeb.WebApp.Services
@inject ValueChanged<TankScale> TankScaleChanged
@inject AmmoniaController AmmoniaController
@inject AmmoniaDataService AmmoniaDataService
@inject NavigationManager NavManager
@inject ILogger<TankView> Logger
@implements IAsyncDisposable

<DxPopup
    @bind-Visible="@this._msgBoxVisible"
    ShowFooter="true"
    ShowCloseButton="false"
    HeaderText="@this._msgHeader"
    BodyText="@this._msgText">
    <FooterContentTemplate Context="Context">
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary"
                  Text="Continue?"
                  Click="@this.OnContinueHandler"/>
        <DxButton CssClass="popup-button my-1 ms-2" 
                  RenderStyle="ButtonRenderStyle.Secondary"
                  Text="Cancel"
                  Click="@this.OnSwapCancelHandler"/>
    </FooterContentTemplate>
</DxPopup>

<div class="card text-center">
    <div class="card-header text-center">
        <h5>@this._cardHeader</h5>
    </div>
    <div class="card-body text-center">
        <div class="flex-row justify-content-center">
            <div class="row p-2">
                <DxButton Text="Start Consuming"
                          Click="@this.OnStartConsuming"
                          RenderStyle="ButtonRenderStyle.Warning"
                          Enabled="@(this._canStartConsuming)"/>
            </div>
            <div class="row p-2">
                <DxButton Text="Remove Tank"
                          Click="@this.OnRemoveTank"
                          RenderStyle="ButtonRenderStyle.Info"
                          Enabled="@(this._canRemoveTank)"/>
            </div>
            <div class="row p-2">
                <DxButton Text="Add Tank"
                          Click="@this.OnAddTank"
                          RenderStyle="ButtonRenderStyle.Success"
                          Enabled="@(this._canAddTank)"/>
            </div>
        </div>
        @if (this._hasTank) {
            <div class="row" hidden="@(this._isAdding || this._isRemoving)">
                <WeightsView CurrentTank="@this._currentTank" IsReadOnly="true"/>
            </div>
        } else {
            <div class="row" hidden="@(this._isAdding || this._isRemoving)">
                <h4>No Tank</h4>
            </div>
        }
        <div class="row" hidden="@(this._isAdding || this._isRemoving)">
            <DxGrid Data="@this.TankScale?.Nh3TankLog">
                <Columns>
                    <DxGridDataColumn FieldName="@nameof(NH3Tank.StartDate)"/>
                    <DxGridDataColumn FieldName="@nameof(NH3Tank.StopDate)"/>
                    <DxGridDataColumn FieldName="@nameof(NH3Tank.StartWeight)"/>
                    <DxGridDataColumn FieldName="@nameof(NH3Tank.StopWeight)"/>
                    <DxGridDataColumn FieldName="@nameof(NH3Tank.ConsumptionPerDay)"/>
                    <DxGridDataColumn FieldName="@nameof(NH3Tank.ConsumptionPerHr)"/>
                </Columns>
                <DetailRowTemplate Context="detailContext">
                    @{
                        <WeightsView CurrentTank="(NH3Tank)detailContext.DataItem" IsReadOnly="true" />
                    }
                </DetailRowTemplate>
            </DxGrid>
        </div>
        @if (this._hasTank) {
            <TankRemoveView TankScale="@this.TankScale" 
                            Visible="@this._removeTankVisible"
                            OnTankRemoved="@this.TankRemovedHandler"
                            OnTankRemoveCanceled="@this.TankRemoveCancelHandler"/>
        }
        <TankAddView TankScale="@this.TankScale"
                     Visible="@this._addTankVisible"
                     OnTankAdded="@this.TankAddedHandler"
                     OnTankAddCancel="@this.TankAddCancelHandler"/>
    </div>
</div>

@code {
    [Parameter]
    public TankScale? TankScale { get; set; }
    private NH3Tank? _currentTank=new NH3Tank();
    private bool _enabled => this.TankScale != null;
    private int _tabIndex = 1;
    private bool _hasTank = false;
    private bool _monitoringWeight = false;
    private bool _isAdding=false;
    private bool _isRemoving = false;
    private bool _isConsuming = false;
    private int _liveTankWeight;
    private double _stdev;
    private string? _cardHeader = "No Tank";
    private List<double> _weights=new List<double>();
    private DateTime _timeStamp;
    private HubConnection? _hubConnection;
    private List<string> _addInstructions = new List<String>() {
        "Enter Labeled SN and Weights then Press Submit",
        "Press Start Calibration and wait for weight to stabilize",
        "Once Stdev is <=0.1 press Capture to continue",
        "Check measured weights then press Upload to finish"
    };
    
    private string? _msgHeader;
    private string? _msgText;
    private bool _msgBoxVisible;

    private bool _removeTankVisible => (this._isRemoving && !this._isAdding);
    private bool _addTankVisible => (this._isAdding && !this._isRemoving);
    private bool _canAddTank => (!this._isAdding && !this._isRemoving && !this._hasTank);
    private bool _canRemoveTank => (!this._isAdding && !this._isRemoving && this._hasTank);
    private bool _canStartConsuming => (!this._isAdding && !this._isRemoving && this._hasTank && !this._isConsuming);
    
    protected override async Task OnInitializedAsync() {
        this._hubConnection=new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/bulkgashub"))
            .Build();
        await this._hubConnection.StartAsync();
    }

    protected override Task OnParametersSetAsync() {
        this.Setup();
        return base.OnParametersSetAsync();
    }

    private void Setup() {
        this._isAdding = false;
        this._isRemoving = false;
        this._hasTank = false;
        this._weights.Clear();
        if (this.TankScale?.CurrentTank != null) {
            this._cardHeader = $"Scale: {this.TankScale.ScaleId} " +
                               $"Tank: {this.TankScale.CurrentTank.SerialNumber}";
            this._currentTank = this.TankScale.CurrentTank;
            this._isConsuming = this.TankScale.TankScaleState == TankScaleState.InUse;
            this._hasTank = true;
        } else {
            this._currentTank = new NH3Tank();
            this._hasTank = false;
            this._cardHeader = $"Scale: {this.TankScale.ScaleId} " +
                               $" No Tank";
        }
    }
    
    private void ShowMsgBox(string header, string message) {
        this._msgHeader = header;
        this._msgText = message;
        this._msgBoxVisible = true;
    }
    
    private Task OnStartConsuming() {
        this.ShowMsgBox("Warning","Are you sure you want to continue?");
        return Task.CompletedTask;
    }
    
    private async Task OnContinueHandler() {
        this._msgBoxVisible = false;
        await this.SwapTank();
    }

    private Task OnSwapCancelHandler() {
        this._msgBoxVisible = false;
        return Task.CompletedTask;
    }
    
    private async Task SwapTank() {
        if (this.TankScale != null) {
            await this.AmmoniaDataService.SwitchTankToConsuming(this.TankScale);
            if (this._hubConnection is {State: HubConnectionState.Connected}) {
                await this._hubConnection.SendAsync("SendRefreshRequest");
            }
            this.TankScaleChanged.SetItemChild(this.TankScale);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnRemoveTank() {
        this._isRemoving = true;
        this._isAdding = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnAddTank() {
        this._isAdding = true;
        await InvokeAsync(StateHasChanged);
    }

    private Task TankAddedHandler() {
        this.TankScaleChanged.SetItemChild(this.TankScale);
        return Task.CompletedTask;
    }

    private Task TankRemovedHandler() {
        this.TankScaleChanged.SetItemChild(this.TankScale);
        return Task.CompletedTask;
    }

    private async Task TankRemoveCancelHandler() {
        this.Setup();
        await InvokeAsync(StateHasChanged);
    }

    private async Task TankAddCancelHandler() {
        this.Setup();
        await InvokeAsync(StateHasChanged);
    }
    

    
    public async ValueTask DisposeAsync() {
        if (this._hubConnection != null) {
            await this._hubConnection.DisposeAsync();
        }
    }
}