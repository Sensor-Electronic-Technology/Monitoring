@using MonitoringSystem.Shared.Data.EntityDtos
@using MonitoringSystem.Shared.Services
@using MonitoringWeb.WebApp.Services
@inject ConfigApiClient Client
@inject SelectionChanged<ModbusDeviceDto> SelectionChanged
<div class="row" style="padding: 1rem">
    <div class="card">
        <h5 class="card-header text-center" >
            Monitor Devices
        </h5>
        <div class="card-body">
            <DxGrid @ref="Grid"
                    Data="@ModbusDevices"
                    KeyFieldName="Id"
                    ValidationEnabled="false"
                    AllowSelectRowByClick="true"
                    SelectedDataItem="@this.SelectedDevice"
                    SelectionMode="GridSelectionMode.Single"
                    EditModelSaving="Grid_EditModelSaving"
                    SelectedDataItemChanged="@Callback"
                    PopupEditFormCssClass="pw-800"
                    EditMode="GridEditMode.EditForm">
                <Columns>
                    <DxGridCommandColumn Width="120px" NewButtonVisible="false" DeleteButtonVisible="false"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.Id)" Visible="false"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.Name)"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.Database)"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.HubName)"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.HubAddress)"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.ReadInterval)"/>
                    <DxGridDataColumn FieldName="@nameof(ModbusDeviceDto.SaveInterval)"/>
                </Columns>
                <EditFormTemplate Context="EditFormContext">
                    @{
                        var device = (ModbusDeviceDto)EditFormContext.EditModel;
                    }
                    <DxFormLayout CssClass="w-100">
                        <DxFormLayoutTabPages>
                            <DxFormLayoutTabPage Caption="Device Info">
                                <DxFormLayoutItem Caption="Name:" ColSpanMd="6">
                                    <DxTextBox @bind-Text="@device.Name"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="HubName" ColSpanMd="6">
                                    <DxTextBox @bind-Text="@device.HubName"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="HubAddress" ColSpanMd="6">
                                    <DxTextBox @bind-Text="@device.HubAddress"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="ReadInterval" ColSpanMd="6">
                                    <DxSpinEdit @bind-Value="@device.ReadInterval"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="SaveInterval" ColSpanMd="6">
                                    <DxSpinEdit @bind-Value="@device.SaveInterval"/>
                                </DxFormLayoutItem>
                            </DxFormLayoutTabPage>
                            <DxFormLayoutTabPage Caption="Network Config.">
                                <DxFormLayoutItem>
                                    <DxTextBox @bind-Text="@device.NetworkConfig.IpAddress"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem>
                                    <DxTextBox @bind-Text="@device.NetworkConfig.Dns"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem>
                                    <DxTextBox @bind-Text="@device.NetworkConfig.Mac"/>
                                </DxFormLayoutItem>
                                
                            </DxFormLayoutTabPage>
                            <DxFormLayoutTabPage Caption="Modbus Config">
                                                            
                            </DxFormLayoutTabPage>
                            
                        </DxFormLayoutTabPages>

                    </DxFormLayout>
                </EditFormTemplate>
            </DxGrid>
        </div>
    </div>
</div>

<div class="row" style="padding: 1rem">
    <p class="demo-text w-100 mt-2">Selected Product: <b>@this.SelectedText</b></p>
    @if (this.SelectedDevice == null) {
        <p>Please select device</p>
    } else {
        <DxTabs RenderMode="TabsRenderMode.AllTabs">
            <DxTabPage Text="Channels">
                <DxTabs>
                    <DxTabPage Text="Analog Inputs">
                        <ChannelGrid DeviceId=@((this.SelectedDevice as ModbusDeviceDto)?.Id.ToString() ?? " ")
                                     TItem="@AnalogInputDto"/>
                    </DxTabPage>
                    <DxTabPage Text="Discrete Inputs">
                        <ChannelGrid DeviceId=@((this.SelectedDevice as ModbusDeviceDto)?.Id.ToString() ?? " ")
                                     TItem="@DiscreteInputDto"/>
                    </DxTabPage>
                    <DxTabPage Text="Virtual Inputs">
                        <ChannelGrid DeviceId=@((this.SelectedDevice as ModbusDeviceDto)?.Id.ToString() ?? " ")
                                     TItem="@VirtualInputDto"/>
                    </DxTabPage>
                    <DxTabPage Text="Discrete Outputs">
                        <ChannelGrid DeviceId=@((this.SelectedDevice as ModbusDeviceDto)?.Id.ToString() ?? " ")
                                     TItem="@DiscreteOutputDto"/>
                    </DxTabPage>
                </DxTabs>
            </DxTabPage>
            <DxTabPage Text="DeviceActions">
                <DeviceActionView DeviceId=@((this.SelectedDevice as ModbusDeviceDto)?.Id.ToString() ?? " ") />
            </DxTabPage>
        </DxTabs>
    }
</div>


@code {
    IEnumerable<ModbusDeviceDto>? ModbusDevices { get; set; }= Enumerable.Empty<ModbusDeviceDto>();
    IEnumerable<DeviceActionDto> DeviceActions { get; set; } = Enumerable.Empty<DeviceActionDto>();
    string? SelectedText { get; set; }
    ModbusDeviceDto? SelectedDevice { get; set; }
    IGrid Grid { get; set; }
    
    protected override async Task OnInitializedAsync() {
        var  devices= await this.Client.GetModbusDevices();
        if (devices is not null) {
            this.ModbusDevices = devices;
            this.SelectedDevice = this.ModbusDevices.First();
        }
    }

    async Task Update() {
        var  devices= await this.Client.GetModbusDevices();
        if (devices is not null) {
            this.ModbusDevices = devices;
            this.SelectedDevice = this.ModbusDevices.First();
            this.SelectionChanged.SetItem(this.SelectedDevice);
            this.SelectedText = this.SelectedDevice?.Name;
        }
        await InvokeAsync(StateHasChanged);
    }
    
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        if (e.EditModel is ModbusDeviceDto device) {
            await this.Client.UpdateDevice(device);
            await this.Update();
        }
    }

    async Task UpdateDataAsync() {
        this.ModbusDevices = await this.Client.GetModbusDevices();
    }

    private void Callback(object selected) {
        this.SelectedDevice = selected as ModbusDeviceDto;
        this.SelectionChanged.SetItem(this.SelectedDevice);
        this.SelectedText = this.SelectedDevice?.Name;
    }
}