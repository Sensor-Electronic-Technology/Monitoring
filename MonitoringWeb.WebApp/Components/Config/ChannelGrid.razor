@using MonitoringSystem.Shared.Data.EntityDtos
@using MonitoringWeb.WebApp.Services
@typeparam TItem
@implements IAsyncDisposable
@inject ConfigApiClient Client
@inject ILogger<ChannelGrid<TItem>> Logger
@inject SelectionChanged<ModbusDeviceDto> SelectionChanged
@inject SelectionChanged<ChannelDto> SelectedChannelChanged

<div class="row" style="padding: 1rem">
    @if (this.Channels.Any()) {
        <DxGrid Data="@this.Channels"
                KeyFieldName="Id"
                ValidationEnabled="false"
                AllowSelectRowByClick="true"
                SelectionMode="GridSelectionMode.Single"
                SelectedDataItem="@this.SelectedChannel"
                SelectedDataItemChanged="@SelectedDataItemChanged"
                EditModelSaving="EditModelSaving"
                PopupEditFormCssClass="pw-800"
                EditMode="GridEditMode.EditForm">
            <Columns>
                <DxGridCommandColumn Width="120px" NewButtonVisible="false" DeleteButtonVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(ChannelDto.Id)" Visible="false"/>
                <DxGridDataColumn FieldName="@nameof(ChannelDto.Identifier)"/>
                <DxGridDataColumn FieldName="@nameof(ChannelDto.DisplayName)"/>
                <DxGridDataColumn FieldName="@nameof(ChannelDto.Connected)"/>
                <DxGridDataColumn FieldName="@nameof(ChannelDto.Display)"/>
            </Columns>
            <EditFormTemplate Context="EditViewContext">
                @{
                    var device = (ChannelDto)EditViewContext.EditModel;
                }
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Identifier" ColSpanSm="6">
                        <DxTextBox @bind-text="@device.Identifier"></DxTextBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Display Name" ColSpanSm="6">
                        <DxTextBox @bind-text="@device.DisplayName"></DxTextBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Connected" ColSpanSm="6">
                        <DxCheckBox @bind-Checked="@device.Connected"></DxCheckBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Display" ColSpanSm="6">
                        <DxCheckBox @bind-Checked="@device.Display"></DxCheckBox>
                    </DxFormLayoutItem>
                    @if (device is AnalogInputDto) {
                        <DxFormLayoutItem Caption="Sensor">
                            <DxComboBox Data="@this.Sensors"
                                        @bind-Value="((AnalogInputDto)device).SensorId"
                                        TextFieldName="@nameof(SensorDto.Name)"
                                        ValueFieldName="@nameof(SensorDto.Id)"/>
                        </DxFormLayoutItem>
                    }
                </DxFormLayout>
            </EditFormTemplate>
        </DxGrid>
    }
</div>
<div class="row" style="padding: 1rem">
    @if (typeof(TItem) != typeof(DiscreteOutputDto)) {
        <AlertEditView ChannelId="@((this.SelectedChannel as ChannelDto)?.Id.ToString())"
                       TItem="@TItem" />
    }
</div>

@code {
    [Parameter]
    public string? DeviceId { get; set; }

    IEnumerable<ChannelDto> Channels { get; set; } = Enumerable.Empty<ChannelDto>();
    IEnumerable<SensorDto>? Sensors { get; set; }
    ChannelDto? SelectedChannel { get; set; }
    
    protected override async Task OnInitializedAsync() {
        this.SelectionChanged.OnChanged += this.SelectedDeviceChanged;
        await this.Update();
    }

    async Task Update() {
        this.Sensors = await this.Client.GetSensors();
        if (this.DeviceId!=null) {
            if (typeof(TItem)==typeof(AnalogInputDto)) {
                this.Channels = await this.Client.GetAnalogChannels(this.DeviceId);
            }else if (typeof(TItem)== typeof(DiscreteInputDto)) {
                this.Channels = await this.Client.GetDiscreteChannels(this.DeviceId);
            }else if (typeof(TItem) == typeof(VirtualInputDto)) {
                this.Channels = await this.Client.GetVirtualChannels(this.DeviceId);
            }else if (typeof(TItem)== typeof(DiscreteOutputDto)) {
                this.Channels = await this.Client.GetOutputChannels(this.DeviceId);
            }
        } else {
            this.Logger.LogError("Channel or ModbusDevice null");
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SelectedDataItemChanged(object selected) {
        this.SelectedChannel = selected as ChannelDto;
        this.SelectedChannelChanged.SetItem(this.SelectedChannel);
    }

    async Task SelectedDeviceChanged() {
        this.DeviceId = this.SelectionChanged?.SelectedItem?.Id.ToString();
        await this.Update();
    }

    async Task EditModelSaving(GridEditModelSavingEventArgs e) {
        if (e.EditModel is ChannelDto channel) {
            await this.Client.UpdateChannel(channel);
            await this.Update();
        }
    }

    public ValueTask DisposeAsync() {
        this.SelectionChanged.OnChanged -= this.SelectedDeviceChanged;
        return ValueTask.CompletedTask;
    }
}