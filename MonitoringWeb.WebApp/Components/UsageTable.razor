@using MonitoringWeb.WebApp.Data
@using MonitoringSystem.Shared.Data.UsageModel
@using MongoDB.Driver
@using MonitoringSystem.Shared.Services
@using MonitoringWeb.WebApp.Services
@inject UsageService UsageService
@inject ValueChanged<BulkGasType> GasTypeChanged;


<div class="row" style="padding: .5rem">
    <DxGrid Data="@Records" AutoCollapseDetailRow="false" 
            AllowGroup="true" 
            ShowGroupPanel="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            ShowAllRows="true">
    <Columns>
            <DxGridDataColumn FieldName="Date" DisplayFormat="d" />
            <DxGridDataColumn FieldName="DayOfWeek"/>
            <DxGridDataColumn FieldName="DayOfMonth"/>
            <DxGridDataColumn FieldName="WeekOfYear" GroupIndex="2"/>
            <DxGridDataColumn FieldName="MonthName" Caption="Month" GroupIndex="1"/>
            <DxGridDataColumn FieldName="Year" GroupIndex="0"  DisplayFormat="D"/>
            <DxGridDataColumn FieldName="Usage" Caption="@this.PerDayCaption"/>
            <DxGridDataColumn FieldName="PerHour" Caption="@this.PerHourCaption"/>
        </Columns>
        <GroupSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Avg" FieldName="Usage" Name="PerDay"/>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Usage" Name="Consumption"/>
        </GroupSummary>
    </DxGrid>
</div>
<div class="row" style="padding: .5rem">
    <DxChart T="UsageDayRecord"
             Data="@Records"
             Width="100%">
        <DxChartTitle Text="Consumption">
            <DxChartSubTitle Text="Weekly Consumption"/>
        </DxChartTitle>
        <DxChartBarSeries Name="Week Of Year" 
                          T="UsageDayRecord" 
                          TValue="double" 
                          TArgument="string" 
                          SummaryMethod="Enumerable.Sum"
                          ArgumentField="@((UsageDayRecord s) => s.WeekOfYear.ToString())"
                          ValueField="@((UsageDayRecord s) => s.Usage)" />
        <DxChartLegend Position="RelativePosition.Outside"
                       HorizontalAlignment="HorizontalAlignment.Center"
                       VerticalAlignment="VerticalEdge.Bottom" />
        <DxChartValueAxis ValueType="ChartAxisDataType.Numeric">
            <DxChartAxisTitle Text="@this.Units"/>
        </DxChartValueAxis>
    </DxChart>
</div>




@code {
    [Parameter]
    public BulkGasType GasType { get; set; }

    IEnumerable<UsageDayRecord>? Records { get; set; }
    string Units { get; set; }
    string PerDayCaption { get; set; }
    string PerHourCaption { get; set; }
    
    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e) {
        if (e.Item.Name == "PerDay") {
            e.DisplayText = string.Format("Avg "+this.Units+"/day"+" : {0:N1}", e.Value);
        } else {
            e.DisplayText = string.Format(e.Item.Name+": {0:N1} "+this.Units, e.Value);
        }
        
    }

    protected override async Task OnInitializedAsync() {
        this.GasTypeChanged.OnParentChanged += this.OnGasTypeChanged;
        await this.Load();
    }
    
    public override async Task SetParametersAsync(ParameterView parameters) {
        await base.SetParametersAsync(parameters);
        await this.Load();
    }

    private async Task OnGasTypeChanged() {
        await this.Load();
    }

    private async Task Load() {
        switch (this.GasType) {
            case BulkGasType.NH3: {
                this.Records = await this.UsageService.GetNH3Usage();
                this.Units = "lb";
                break;
            }
            case BulkGasType.H2: {
                this.Records = await this.UsageService.GetH2Usage();
                this.Units = "PSI";
                break;
            }
            case BulkGasType.N2: {
                this.Records = await this.UsageService.GetN2Usage();
                this.Units = "inH20";
                break;
            }
        }
        this.PerDayCaption = this.Units + "/day";
        this.PerHourCaption = this.Units + "/hr";
        await InvokeAsync(StateHasChanged);
    }

}