@using MonitoringWeb.WebApp.Data
@using MonitoringSystem.Shared.Data.UsageModel
@using MongoDB.Driver
@using MonitoringSystem.Shared.Services
@using MonitoringWeb.WebApp.Services
@using Blazor.DownloadFileFast.Interfaces
@using ClosedXML.Excel
@using System.Text
@using MonitoringSystem.Shared.Data
@inject UsageService UsageService
@inject ValueChanged<BulkGasType> GasTypeChanged;
@inject IBlazorDownloadFileService DownloadService
@inject SpinnerService SpinnerService

<div class="row" style="padding: .5rem">
    <DxGrid Data="@Records" AutoCollapseDetailRow="false" 
            AllowGroup="true" 
            ShowGroupPanel="true"
            CustomizeSummaryDisplayText="Grid_CustomizeSummaryDisplayText"
            ShowAllRows="true">
        <Columns>
            <DxGridDataColumn FieldName="Date" DisplayFormat="d" />
            <DxGridDataColumn FieldName="DayOfWeek"/>
            <DxGridDataColumn FieldName="DayOfMonth"/>
            <DxGridDataColumn FieldName="WeekOfYear" GroupIndex="2"/>
            <DxGridDataColumn FieldName="MonthName" Caption="Month" GroupIndex="1"/>
            <DxGridDataColumn FieldName="Year" GroupIndex="0"  DisplayFormat="D"/>
            <DxGridDataColumn FieldName="Usage" Caption="@this.PerDayCaption"/>
            <DxGridDataColumn FieldName="PerHour" Caption="@this.PerHourCaption"/>
        </Columns>
        <GroupSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Avg" FieldName="Usage" Name="PerDay"/>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Usage" Name="Consumption"/>
        </GroupSummary>
    </DxGrid>
</div>
<div class="row">
    <DxButton RenderStyle="ButtonRenderStyle.Light"
              Text="Download"
              Click="@this.DownloadHandler"/>
</div>
<div class="row" style="padding: .5rem">
    <DxChart @ref="chart" T="UsageDayRecord"
             Data="@Records"
             Width="100%">
        <DxChartTitle Text="Consumption">
            <DxChartSubTitle Text="Weekly Consumption"/>
        </DxChartTitle>
        <DxChartBarSeries Name="Week Of Year" 
                          T="UsageDayRecord" 
                          TValue="double" 
                          TArgument="string" 
                          SummaryMethod="Enumerable.Sum"
                          ArgumentField="@((UsageDayRecord s) => s.WeekOfYear.ToString())"
                          ValueField="@((UsageDayRecord s) => s.Usage)" />
        <DxChartLegend Position="RelativePosition.Outside"
                       HorizontalAlignment="HorizontalAlignment.Center"
                       VerticalAlignment="VerticalEdge.Bottom" />
        <DxChartValueAxis ValueType="ChartAxisDataType.Numeric">
            <DxChartAxisTitle Text="@this.Units"/>
        </DxChartValueAxis>
    </DxChart>
</div>




@code {
    [Parameter]
    public BulkGasType GasType { get; set; }

    IEnumerable<UsageDayRecord>? Records { get; set; }
    string Units { get; set; }
    string PerDayCaption { get; set; }
    string PerHourCaption { get; set; }
    
    DxChartBase chart;
    
    async void ExportChart(ChartExportFormat format) {
        await chart?.ExportAsync("BubbleChart", format);
    }
    
    void Grid_CustomizeSummaryDisplayText(GridCustomizeSummaryDisplayTextEventArgs e) {
        if (e.Item.Name == "PerDay") {
            e.DisplayText = string.Format("Avg "+this.Units+"/day"+" : {0:N1}", e.Value);
        } else {
            e.DisplayText = string.Format(e.Item.Name+": {0:N1} "+this.Units, e.Value);
        }
        
    }

    protected override async Task OnInitializedAsync() {
        this.GasTypeChanged.OnParentChanged += this.OnGasTypeChanged;
        await this.Load();
    }
    
    public override async Task SetParametersAsync(ParameterView parameters) {
        await base.SetParametersAsync(parameters);
        await this.Load();
    }

    private async Task OnGasTypeChanged() {
        await this.Load();
    }

    private async Task DownloadHandler() {
        this.SpinnerService.Show();
        var wb = new XLWorkbook();
        var worksheet=wb.Worksheets.Add("Consumption");
        worksheet.Cell(1, 1).Value = "Date";
        worksheet.Cell(1, 2).Value = "Year";
        worksheet.Cell(1, 3).Value = "Month";
        worksheet.Cell(1, 4).Value = "WeekOfYear";
        worksheet.Cell(1, 5).Value = "DayOfWeek";
        worksheet.Cell(1, 6).Value = "PerHour";
        worksheet.Cell(1, 7).Value = "PerDay";


        int count = 2;
        foreach (var item in this.Records) {
            worksheet.Cell(count, 1).Value = item.Date;
            worksheet.Cell(count, 2).Value = item.Year;
            worksheet.Cell(count, 3).Value = item.Month;
            worksheet.Cell(count, 4).Value = item.WeekOfYear;
            worksheet.Cell(count, 5).Value = item.DayOfWeek;
            worksheet.Cell(count, 6).Value = item.PerHour;
            worksheet.Cell(count, 7).Value = item.Usage;
            count++;
        }
        worksheet.Cell(1, 10).Value = "Week";
        //worksheet.Cell(1, 11).Value = "Month";
        worksheet.Cell(1, 11).Value = "Avg. Daily";
        worksheet.Cell(1, 12).Value = "Week Total";

        var weeks=this.Records.GroupBy(e => e.WeekOfYear, e => new {
            month = e.Month, day = e.Date.DayOfYear, hour = e.PerHour, daily = e.Usage
        }).ToDictionary(e => e.Key, e => e.ToArray());
        count = 2;
        foreach (var week in weeks) {
            worksheet.Cell(count,10).Value=week.Key;
            worksheet.Cell(count,11).Value=week.Value.Average(e => e.daily);
            worksheet.Cell(count,12).Value=week.Value.Sum(e => e.daily);
            count++;
        }
        
        worksheet.Cell(1, 14).Value = "Month";
        worksheet.Cell(1, 15).Value = "Avg. Daily";
        worksheet.Cell(1, 16).Value = "Month Total";

        var months=this.Records.GroupBy(e => e.Month, e => new {
            month = e.Month, day = e.Date.DayOfYear, hour = e.PerHour, daily = e.Usage
        }).ToDictionary(e => e.Key, e => e.ToArray());
        count = 2;
        
        foreach (var month in months) {
            worksheet.Cell(count,14).Value=month.Key;
            worksheet.Cell(count,15).Value=month.Value.Average(e => e.daily);
            worksheet.Cell(count,16).Value=month.Value.Sum(e => e.daily);
            count++;
        }

        var stream = new MemoryStream();
        wb.SaveAs(stream);
        var bytes = stream.ToArray();
        await this.DownloadService.DownloadFileAsync("test.xlsx", bytes);
        
        this.SpinnerService.Hide();
    }

    private async Task Load() {
        switch (this.GasType) {
            case BulkGasType.NH3: {
                this.Records = await this.UsageService.GetNH3Usage();
                this.Units = "lb";
                break;
            }
            case BulkGasType.H2: {
                this.Records = await this.UsageService.GetH2Usage();
                this.Units = "PSI";
                break;
            }
            case BulkGasType.N2: {
                this.Records = await this.UsageService.GetN2Usage();
                this.Units = "inH20";
                break;
            }
        }
        this.PerDayCaption = this.Units + "/day";
        this.PerHourCaption = this.Units + "/hr";
        await InvokeAsync(StateHasChanged);
    }

}