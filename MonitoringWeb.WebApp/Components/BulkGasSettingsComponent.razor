@using MonitoringSystem.Shared.Data
@using System.Drawing
@using MonitoringWeb.WebApp.Services
@inject WebsiteConfigurationProvider ConfigurationProvider
@inject ISidepanelService Sidepanel
<h2>Testing</h2>
<div class="row">
    <DxFormLayout>
            <DxFormLayoutItem Caption="Page Refresh">
                <DxSpinEdit @bind-Value="@this.BulkSettings.RefreshTime"/>
            </DxFormLayoutItem>
            @foreach (var setting in this.BulkSettings.BulkGasSettings) {
                <DxFormLayoutTabPage Caption="@setting.Name">
                    <DxFormLayoutGroup Caption="General">

                        <DxFormLayoutItem Caption="Series Color">
                            <DxComboBox Data="@this.ColorList"
                                        @bind-Value="@setting.PointColor"/>
                        </DxFormLayoutItem>
                        <DxFormLayoutGroup Caption="Time Range">
                            <DxFormLayoutItem Caption="Hours Before">
                                <DxSpinEdit @bind-Value="@setting.HoursBefore"/>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Hours After">
                                <DxSpinEdit @bind-Value="@setting.HoursBefore"/>
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>
                    </DxFormLayoutGroup>
                    <DxFormLayoutGroup Caption="Display Alerts">
                        @foreach (var alert in setting.BulkGasAlerts) {
                            <DxFormLayoutGroup Caption="@alert.Label">
                                <DxFormLayoutItem Caption="Label">
                                    <DxTextBox @bind-Text="@alert.Label"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Set Point">
                                    <DxSpinEdit @bind-Value="@alert.SetPoint"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Value Default">
                                    <DxCheckBox CheckType="CheckType.Switch"
                                                LabelPosition="LabelPosition.Left"
                                                @bind-Checked="@alert.Default"
                                                Alignment="CheckBoxContentAlignment.SpaceBetween">
                                        Defualt
                                    </DxCheckBox>
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>
                        }
                    </DxFormLayoutGroup>
                    <DxFormLayoutGroup Caption="Reference Lines">
                        @foreach (var refLine in setting.ReferenceLines) {
                            <DxFormLayoutGroup Caption="@refLine.Label">
                                <DxFormLayoutItem Caption="Label">
                                    <DxTextBox @bind-Text="@refLine.Label"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Value">
                                    <DxSpinEdit @bind-Value="@refLine.Value"/>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Color">
                                    <DxComboBox Data="@this.ColorList"
                                                @bind-Value="@refLine.Color"/>
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>
                        }
                    </DxFormLayoutGroup>
                </DxFormLayoutTabPage>
            }
        </DxFormLayout>
</div>


@code {
    [Parameter]
    public WebsiteBulkSettings BulkSettings { get; set; }

    IEnumerable<KnownColor> ColorList = Enum.GetValues<KnownColor>();

    int _refreshTime = 0;

    protected override Task OnInitializedAsync() {
        //this.BulkSettings = this.ConfigurationProvider.WebsiteBulkSettings;
        //this._refreshTime = this.BulkSettings.RefreshTime / 60 / 1000;
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync() {
        this._refreshTime = this.BulkSettings.RefreshTime / 60 / 1000;
        //InvokeAsync(StateHasChanged);
        return base.OnParametersSetAsync();
    }

    private void HandleValidSubmit() {
    // Process the valid form
        Sidepanel.Close();
    }
    
}