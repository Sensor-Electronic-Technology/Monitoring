@using MonitoringWeb.WebApp.Data
@using MonitoringWeb.WebApp.Services
@using System.Drawing
@using MongoDB.Driver
@using ClosedXML.Excel
@using MonitoringSystem.Shared.Data
@using MonitoringSystem.Shared.Data.LogModel
@using MonitoringSystem.Shared.Services
@using Blazor.DownloadFileFast.Interfaces
@inject PlotDataService PlotService
@inject ValueChanged<DateRange> DateRangeState
@inject BulkGasProvider BulkGasProvider
@inject SpinnerService SpinnerService
@inject IBlazorDownloadFileService DownloadService
@inject ILogger<BulkGasPlot> Logger
@implements IAsyncDisposable

<Spinner></Spinner>
<div class="row" style="padding: 1rem">
    <DxButton RenderStyle="ButtonRenderStyle.Primary"
              Text="Download"
              SizeMode="SizeMode.Medium"
              RenderStyleMode="ButtonRenderStyleMode.Contained"
              Click="@this.DownloadHandler"/>
</div>
<CustomRange StartDate="this.StartDate" StopDate="@StopDate" CustomDateVisible="@this.CustomDateVisible"/>
<div class="card">
    @if (this.RangeSelectVisible) {
        <div class="card-header">
            <div class="row">
                <div class="col">
                    @foreach (PlotRangeDays range in Enum.GetValues(typeof(PlotRangeDays)).Cast<PlotRangeDays>().ToList()) {
                        <DxButton RenderStyle="ButtonRenderStyle.Light"
                                  Text="@Enum.GetName(range).Substring(1)"
                                  Click="@(async Task (arg) => { await this.OnClick(range); })"/>
                    }
                </div>
            </div>
        </div>
    }
    <div class="card-body">
        @if (this.PlotData == null) {
            @*<div id="loading-indicator">

            </div>*@
        } else {
            <DxChart Data="@PlotData"
                     Width="100%"
                     Height="100%">
                <DxChartLegend AllowToggleSeries="true"
                               Orientation="Orientation.Horizontal"
                               VerticalAlignment="VerticalEdge.Top"
                               HorizontalAlignment="HorizontalAlignment.Center"
                               Position="RelativePosition.Outside">
                    <DxChartTitle Text="Detectors"> </DxChartTitle>
                </DxChartLegend>
                <DxChartCommonSeries NameField="@((AnalogReadingDto r) => r.Name)"
                                     ArgumentField="@((AnalogReadingDto r) => r.TimeStamp)"
                                     ValueField="@((AnalogReadingDto r) => (int)r.Value)">
                    <SeriesTemplate Context="settings">
                        @if (this.GasType == BulkGasType.NH3) {
                            <DxChartLineSeries Settings="@settings">
                                <DxChartSeriesLabel Visible="false"/>
                                <DxChartSeriesPoint Visible="true"/>
                                <DxChartAggregationSettings Enabled="true"
                                                            Method="ChartAggregationMethod.Average"/>
                            </DxChartLineSeries>
                        } else {
                            @if (this._bulkGasSettings == null) {
                                <DxChartLineSeries Settings="@settings" Color="Color.Aqua">
                                    <DxChartSeriesLabel Visible="false"/>
                                    <DxChartSeriesPoint Visible="true"/>
                                    <DxChartAggregationSettings Enabled="true"
                                                                Method="ChartAggregationMethod.Min"/>
                                </DxChartLineSeries>
                            } else {
                                <DxChartLineSeries Settings="@settings" 
                                                   Color="@Color.FromKnownColor(this._bulkGasSettings.PointColor)">
                                    <DxChartSeriesLabel Visible="false"/>
                                    <DxChartSeriesPoint Visible="true"/>
                                    <DxChartAggregationSettings Enabled="@_bulkGasSettings.EnableAggregation"
                                                                Method="ChartAggregationMethod.Min"/>
                                </DxChartLineSeries>
                            }
                        }
                    </SeriesTemplate>
                </DxChartCommonSeries>
                <DxChartArgumentAxis ArgumentType="ChartAxisDataType.DateTime"
                                     Type="ChartAxisType.Continuous">
                    <DxChartAxisRange StartValue="@this.PlotStart"
                                      EndValue="@this.PlotStop"/>
                </DxChartArgumentAxis>
                <DxChartValueAxis ValueType="ChartAxisDataType.Numeric" >
                    @if (this._bulkGasSettings != null) {
                        <DxChartConstantLine Value="@this._bulkGasSettings.AlrmRefLine.Value" Width="3" 
                                             DisplayBehindSeries="false"
                                             Color="@Color.FromKnownColor(this._bulkGasSettings.AlrmRefLine.Color)">
                            <DxChartConstantLineLabel Text="@this._bulkGasSettings.AlrmRefLine.Label" 
                                                      HorizontalAlignment="HorizontalAlignment.Center"
                                                      VerticalAlignment="VerticalAlignment.Center"
                                                      Position="RelativePosition.Outside" />
                        </DxChartConstantLine>
                        <DxChartConstantLine Value="@this._bulkGasSettings.WarnRefLine.Value" Width="3" 
                                             DisplayBehindSeries="false"
                                             Color="@Color.FromKnownColor(this._bulkGasSettings.WarnRefLine.Color)">
                            <DxChartConstantLineLabel Text="@this._bulkGasSettings.WarnRefLine.Label" HorizontalAlignment="HorizontalAlignment.Center"
                                                      VerticalAlignment="VerticalAlignment.Center"
                                                      Position="RelativePosition.Outside" />
                        </DxChartConstantLine>
                        <DxChartConstantLine Value="@this._bulkGasSettings.SoftRefLine.Value" Width="3" 
                                             DisplayBehindSeries="false"
                                             Color="@Color.FromKnownColor(this._bulkGasSettings.SoftRefLine.Color)">
                            <DxChartConstantLineLabel Text="@this._bulkGasSettings.SoftRefLine.Label" HorizontalAlignment="HorizontalAlignment.Center"
                                                      VerticalAlignment="VerticalAlignment.Center"
                                                      Position="RelativePosition.Outside" />
                        </DxChartConstantLine>
                    }
                    <DxChartAxisRange StartValue="@this.Sensor.YAxisStart" 
                                      EndValue="@this.Sensor.YAxisStop"/>

                    <DxChartAxisTitle Text="@this.Sensor.Units"/>
                </DxChartValueAxis>
                <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"/>
                <DxChartScrollBarSettings ArgumentAxisScrollBarVisible="true"
                                          ArgumentAxisScrollBarPosition="ChartScrollBarPosition.Bottom"/>

                <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
                    <div style="background-color: grey;">
                        <div class="font-weight-bold">
                            t: @(((DateTime)context.Point.Argument).DateTimeLocal())
                        </div>
                        <div>
                            value: @((context.Point.Value))
                        </div>
                    </div>
                </DxChartTooltip>
            </DxChart>
        }
    </div>
</div>
@code {
    [Parameter]
    public BulkGasType GasType { get; set; }
    
    [Parameter] 
    public bool CustomDateVisible { get; set; } = true;

    [Parameter] 
    public bool RangeSelectVisible { get; set; } = true;

    BulkGasSettings? _bulkGasSettings;
    AccordionExpandCollapseAction ExpandCollapseAction { get; set; } = AccordionExpandCollapseAction.HeaderClick;
    DateTime StartDate = DateTime.Now.AddDays(-1).ToLocalTime();
    DateTime StopDate = DateTime.Now.AddHours(6).ToLocalTime();
    DateTime PlotStart;
    DateTime PlotStop;
    SensorType Sensor;
    IEnumerable<AnalogReadingDto>? PlotData { get; set; }
    string Header = "";

    protected override async Task OnInitializedAsync() {
        this.DateRangeState.OnChildChanged += this.OnDateRangeChanged;
        var settings = await this.BulkGasProvider.GetSettings();
        switch (this.GasType) {
            case BulkGasType.H2: {
                this._bulkGasSettings=settings.H2Settings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
            case BulkGasType.N2: {
                this._bulkGasSettings=settings.N2Settings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
            case BulkGasType.NH3: {
                this._bulkGasSettings=settings.NHSettings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
        }
        await this.Load();
    }

    private Task Submit() {
        return Task.CompletedTask;
    }

    private async Task OnDateRangeChanged() {
        this.SpinnerService.Show();
        this.StartDate = this.DateRangeState.Item.Start;
        this.StopDate = this.DateRangeState.Item.Stop;
        await this.ReLoad();
        this.SpinnerService.Hide();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnClick(PlotRangeDays rangeDays) {
        this.StartDate = DateTime.Now.AddDays(-(int)rangeDays);
        this.StopDate = DateTime.Now.AddDays((int)rangeDays);
        await this.Load();
    }

    private async Task Load() {
        var start= this.StartDate;
        var stop = this.StopDate;
        PlotData plotData = new PlotData();
        switch (this.GasType) {
            case BulkGasType.N2:
                this.Header = "Bulk N2";
                plotData=await this.PlotService.GetChannelDatav2(this._bulkGasSettings.DeviceName,
                    this._bulkGasSettings.ChannelName, start, stop);
                this.Logger.LogInformation("Loaded N2 Data");
                break;
            case BulkGasType.H2:
                this.Header = "Bulk H2";
                plotData=await this.PlotService.GetChannelDatav2(this._bulkGasSettings.DeviceName,
                    this._bulkGasSettings.ChannelName, start, stop);
                this.Logger.LogInformation("Loaded H2 Data");
                break;
            case BulkGasType.NH3:
                this.Header = "Bulk NH3";
                plotData=await this.PlotService.GetNH3Data(start, stop);
                this.Logger.LogInformation("Loaded NH3 Data");
                break;
        }
        this.PlotData = plotData.AnalogReadings;
        this.Sensor = plotData.SensorType;
        
        if(this.GasType == BulkGasType.NH3) {
            this.Sensor.YAxisStart = this._bulkGasSettings.YAxisMin;
            this.Sensor.YAxisStop = (int)plotData.AnalogReadings.Max(e=>e.Value);
        } else {
            this.Sensor.YAxisStart = this._bulkGasSettings.YAxisMin;
            this.Sensor.YAxisStop = this._bulkGasSettings.YAxisMax;
        }
        this.PlotStart = this.StartDate;
        this.PlotStop = this.StopDate;
        this.DateRangeState.SetItemParent(new DateRange() {
            Start=this.StartDate,Stop = this.StopDate
        });
       this.Logger.LogInformation($"{this._bulkGasSettings.DeviceName} Plot Loaded.  Channel: {this._bulkGasSettings.ChannelName}");
    }
    
    private async Task ReLoad() {
        var start= this.StartDate;
        var stop = this.StopDate;
        PlotData plotData = new PlotData();
        switch (this.GasType) {
            case BulkGasType.N2:
                this.Header = "Bulk N2";
                plotData=await this.PlotService.GetChannelDatav2(this._bulkGasSettings.DeviceName,
                this._bulkGasSettings.ChannelName, start, stop);
                break;
            case BulkGasType.H2:
                this.Header = "Bulk H2";
                plotData=await this.PlotService.GetChannelDatav2(this._bulkGasSettings.DeviceName,
                this._bulkGasSettings.ChannelName, start, stop);
                break;
            case BulkGasType.NH3:
                this.Header = "Bulk NH3";
                plotData=await this.PlotService.GetNH3Data(start, stop);
                
                break;
        }
        this.PlotData = plotData.AnalogReadings;
        this.Sensor = plotData.SensorType;
        
        if(this.GasType == BulkGasType.NH3) {
            this.Sensor.YAxisStart = this._bulkGasSettings.YAxisMin;
            this.Sensor.YAxisStop = (int)plotData.AnalogReadings.Max(e=>e.Value);
        } else {
            this.Sensor.YAxisStart = this._bulkGasSettings.YAxisMin;
            this.Sensor.YAxisStop = this._bulkGasSettings.YAxisMax;
        }
        this.PlotStart = this.StartDate;
        this.PlotStop = this.StopDate;
        this.Logger.LogInformation($"{this._bulkGasSettings.DeviceName} Plot Loaded.  Channel: {this._bulkGasSettings.ChannelName}");
        
    }
    
    private async Task DownloadHandler() {
        this.SpinnerService.Show();
        
        var bytes=await this.PlotService.GetBulkGasDownloadData(this.PlotData,this.GasType);
        await this.DownloadService.DownloadFileAsync($"{this.GasType.ToString()}_Data.xlsx", bytes);
        this.SpinnerService.Hide();
    }
    
    public ValueTask DisposeAsync() {
        this.DateRangeState.OnChildChanged -= this.OnDateRangeChanged;
        return ValueTask.CompletedTask;
    }
}