@using MonitoringSystem.Shared.Data
@using MonitoringSystem.Shared.Data.LogModel
@using MonitoringSystem.Shared.Services
@using MonitoringWeb.WebApp.Data
@using MonitoringWeb.WebApp.Services
@using System.Drawing
@inject PlotDataService PlotService
@inject WebsiteConfigurationProvider ConfigurationProvider
@inject ILogger<BulkGasPlot> Logger
@implements IAsyncDisposable

@if (this.PlotData != null) {
    <DxChart Data="@PlotData"
         Width="100%"
         Height="100%">
    <DxChartLegend AllowToggleSeries="true"
                   Orientation="Orientation.Horizontal"
                   VerticalAlignment="VerticalEdge.Top"
                   HorizontalAlignment="HorizontalAlignment.Center"
                   Position="RelativePosition.Outside">
        <DxChartTitle Text="Detectors"> </DxChartTitle>
    </DxChartLegend>
    <DxChartCommonSeries NameField="@((AnalogReadingDto r) => r.Name)"
                         ArgumentField="@((AnalogReadingDto r) => r.TimeStamp)"
                         ValueField="@((AnalogReadingDto r) => (int)r.Value)">
        <SeriesTemplate Context="settings">
            @if (this.GasType == BulkGasType.NH3) {
                <DxChartLineSeries Settings="@settings">
                    <DxChartSeriesLabel Visible="false"/>
                    <DxChartSeriesPoint Visible="true"/>
                    <DxChartAggregationSettings Enabled="true"
                                                Method="ChartAggregationMethod.Min"/>
                </DxChartLineSeries>
            } else {
                @if (this._bulkGasSettings == null) {
                    <DxChartLineSeries Settings="@settings" Color="Color.Aqua">
                        <DxChartSeriesLabel Visible="false"/>
                        <DxChartSeriesPoint Visible="true"/>
                        <DxChartAggregationSettings Enabled="true"
                                                    Method="ChartAggregationMethod.Min"/>
                    </DxChartLineSeries>
                } else {
                    <DxChartLineSeries Settings="@settings" 
                                       Color="@Color.FromKnownColor(this._bulkGasSettings.PointColor)">
                        <DxChartSeriesLabel Visible="false"/>
                        <DxChartSeriesPoint Visible="true"/>
                        <DxChartAggregationSettings Enabled="@_bulkGasSettings.EnableAggregation"
                                                    Method="ChartAggregationMethod.Min"/>
                    </DxChartLineSeries>
                }
            }
        </SeriesTemplate>
    </DxChartCommonSeries>
    <DxChartArgumentAxis ArgumentType="ChartAxisDataType.DateTime"
                         Type="ChartAxisType.Continuous">
        <DxChartAxisRange StartValue="@this.PlotStart"
                          EndValue="@this.PlotStop"/>
    </DxChartArgumentAxis>
    <DxChartValueAxis ValueType="ChartAxisDataType.Numeric" >
        @if (this._bulkGasSettings != null) {
            <DxChartConstantLine Value="@this._bulkGasSettings.AlrmRefLine.Value" Width="3" 
                                 DisplayBehindSeries="false"
                                 Color="@Color.FromKnownColor(this._bulkGasSettings.AlrmRefLine.Color)">
                <DxChartConstantLineLabel Text="@this._bulkGasSettings.AlrmRefLine.Label" 
                                          HorizontalAlignment="HorizontalAlignment.Center"
                                          VerticalAlignment="VerticalAlignment.Center"
                                          Position="RelativePosition.Outside" />
            </DxChartConstantLine>
            <DxChartConstantLine Value="@this._bulkGasSettings.WarnRefLine.Value" Width="3" 
                                 DisplayBehindSeries="false"
                                 Color="@Color.FromKnownColor(this._bulkGasSettings.WarnRefLine.Color)">
                <DxChartConstantLineLabel Text="@this._bulkGasSettings.WarnRefLine.Label" HorizontalAlignment="HorizontalAlignment.Center"
                                          VerticalAlignment="VerticalAlignment.Center"
                                          Position="RelativePosition.Outside" />
            </DxChartConstantLine>
            <DxChartConstantLine Value="@this._bulkGasSettings.SoftRefLine.Value" Width="3" 
                                 DisplayBehindSeries="false"
                                 Color="@Color.FromKnownColor(this._bulkGasSettings.SoftRefLine.Color)">
                <DxChartConstantLineLabel Text="@this._bulkGasSettings.SoftRefLine.Label" HorizontalAlignment="HorizontalAlignment.Center"
                                          VerticalAlignment="VerticalAlignment.Center"
                                          Position="RelativePosition.Outside" />
            </DxChartConstantLine>
        }
        <DxChartAxisRange StartValue="@this.Sensor.YAxisStart" 
                          EndValue="@this.Sensor.YAxisStop"/>

        <DxChartAxisTitle Text="@this.Sensor.Units"/>
    </DxChartValueAxis>
    <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both"/>
    <DxChartScrollBarSettings ArgumentAxisScrollBarVisible="true"
                              ArgumentAxisScrollBarPosition="ChartScrollBarPosition.Bottom"/>

    <DxChartTooltip Enabled="true" Position="RelativePosition.Outside">
        <div style="background-color: grey;">
            <div class="font-weight-bold">
                t: @(((DateTime)context.Point.Argument).DateTimeLocal())
            </div>
            <div>
                value: @((context.Point.Value))
            </div>
        </div>
    </DxChartTooltip>
</DxChart>
}

@code {
    [Parameter]
    public BulkGasType GasType { get; set; }
    
    BulkGasSettings? _bulkGasSettings;
    AccordionExpandCollapseAction ExpandCollapseAction { get; set; } = AccordionExpandCollapseAction.HeaderClick;
    DateTime StartDate = DateTime.Now.AddDays(-1).ToLocalTime();
    DateTime StopDate = DateTime.Now.AddHours(6).ToLocalTime();
    DateTime PlotStart;
    DateTime PlotStop;
    SensorType Sensor;
    IEnumerable<AnalogReadingDto>? PlotData { get; set; }
    string Header = "";
    bool loaded = false;

    protected override async Task OnInitializedAsync() {
        switch (this.GasType) {
            case BulkGasType.H2: {
                this._bulkGasSettings=this.ConfigurationProvider.WebsiteBulkSettings.H2Settings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
            case BulkGasType.N2: {
                this._bulkGasSettings=this.ConfigurationProvider.WebsiteBulkSettings.N2Settings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
            case BulkGasType.NH3: {
                this._bulkGasSettings=this.ConfigurationProvider.WebsiteBulkSettings.NHSettings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
        }
        await this.Load();
        this.loaded = true;
    }

    private Task Submit() {
        return Task.CompletedTask;
    }
    
    private async Task OnClick(PlotRangeDays rangeDays) {
        this.StartDate = DateTime.Now.AddDays(-(int)rangeDays);
        this.StopDate = DateTime.Now.AddDays((int)rangeDays);
        await this.Load();
    }

    private async Task Load() {
        this.PlotData=null;
        StateHasChanged();
        var start= this.StartDate;
        var stop = this.StopDate;
        var ret=await this.PlotService.GetChannelDatav2(this._bulkGasSettings.DeviceName,
                this._bulkGasSettings.ChannelName, start, stop);
        this.PlotData = ret.Item2;
        this.Sensor = ret.Item1;
        this.Sensor.YAxisStart = this._bulkGasSettings.YAxisMin;
        this.Sensor.YAxisStop = this._bulkGasSettings.YAxisMax;
        switch (this.GasType) {
            case BulkGasType.N2:
                this.Header = "Bulk N2";
                break;
            case BulkGasType.H2:
                this.Header = "Bulk H2";
                break;
            case BulkGasType.NH3:
                this.Header = "Bulk NH3";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        this.PlotStart = this.StartDate;
        this.PlotStop = this.StopDate;
        this.StateHasChanged();
        this.Logger.LogInformation($"{DateTime.Now}: {this._bulkGasSettings.DeviceName} Plot Loaded.  " +
                                   $"Channel: {this._bulkGasSettings.ChannelName}");
    }

    /*protected override async Task OnParametersSetAsync() {
        switch (this.GasType) {
            case BulkGasType.H2: {
                this._bulkGasSettings=this.ConfigurationProvider.WebsiteBulkSettings.H2Settings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
            case BulkGasType.N2: {
                this._bulkGasSettings=this.ConfigurationProvider.WebsiteBulkSettings.N2Settings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
            case BulkGasType.NH3: {
                this._bulkGasSettings=this.ConfigurationProvider.WebsiteBulkSettings.NHSettings;
                this.StartDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursBefore*-1).ToLocalTime();
                this.StopDate = DateTime.Now.AddHours(this._bulkGasSettings.HoursAfter).ToLocalTime();
                break;
            }
        }
        await this.Load();
        StateHasChanged();
    }*/
    
    public ValueTask DisposeAsync() {
        return ValueTask.CompletedTask;
    }
}