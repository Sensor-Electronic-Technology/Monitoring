@page "/bulkdash"
@using MonitoringSystem.Shared.Data
@using MonitoringWeb.WebApp.Services
@using Microsoft.AspNetCore.SignalR.Client
@using MonitoringWeb.WebApp.Components.Bulkgas
@inject NavigationManager NavManager
@inject ISidepanelService SidepanelService
@inject WebsiteConfigurationProvider ConfigurationProvider
@implements IAsyncDisposable 

<style>
#sidepanel.is-open {
    width: 70%;
    background-color: #1f4671;
}

@@media (min-width: 768px) {
    #sidepanel.is-open {
        width: 50%;
    }
}
</style>


<SidepanelComponent @ref="this._sidepanel" Title="Settings">
    <BulkGasSettingsComponent BulkSettings="@this._bulkSettings"
                              BulkEmailSettings="@this._bulkEmailSettings"
                              Saved="@this.SavedHandler"/>
</SidepanelComponent>

<div class="row float-end">
    <DxButton Click="Callback" 
              RenderStyle="ButtonRenderStyle.Primary"
              Text="@this._buttonText"/>
</div>
<div>
    <BulkStatus></BulkStatus>
</div>
<div class="row">
    <div class="col-6">
        <BulkGasDashPlot GasType="BulkGasType.H2" />
    </div>
    <div class="col-6">
        <BulkGasDashPlot GasType="BulkGasType.N2"/>
    </div>

</div>
<div class="row">
    <div class="col-12">
        <BulkGasDashPlot GasType="BulkGasType.NH3"/>
    </div>
</div>


@code {

    private string _buttonText = "Open Settings";
    private WebsiteBulkSettings _bulkSettings;
    private BulkEmailSettings _bulkEmailSettings;
    private SidepanelComponent _sidepanel;
    
    private HubConnection? _hubConnection;
    private bool _isSender = false;
    
    public bool IsConnected =>
        this._hubConnection?.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync() {
        this._bulkSettings = ConfigurationProvider.WebsiteBulkSettings;
        this._bulkEmailSettings = ConfigurationProvider.BulkEmailSettings;
        this._hubConnection=new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/bulkgashub"))
            .Build();
        this._hubConnection.On("ReceiveRefreshRequest",this.ReceiveRefreshRequest);
        await this._hubConnection.StartAsync();
    }
    
    protected override void OnAfterRender(bool firstRender) {
        if (firstRender){
            var timer = new Timer(new TimerCallback(_ =>
            {
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            }), null, this._bulkSettings.RefreshTime,  this._bulkSettings.RefreshTime);
        }
    }

    private async void SavedHandler() {
        this._buttonText = "Open Settings";
        await this.SendRefreshRequest();
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private Task ReceiveRefreshRequest() {
        if (this._isSender) {
            this._isSender = false;
        } else {
            this.NavManager.NavigateTo(this.NavManager.Uri,forceLoad:true);
        }
        return Task.CompletedTask;
    }

    private async Task SendRefreshRequest() {
        if (this.IsConnected) {
            this._isSender = true;
            await this._hubConnection.SendAsync("SendRefreshRequest");
        }
    }

    private void Callback() {
        if (this.SidepanelService.IsOpen) {
            this._sidepanel.Close();
            this._buttonText = "Open Settings";
        } else {
            this._sidepanel.Open();
            this._buttonText = "Close Settings";
        }
    }

    public async ValueTask DisposeAsync() {
        if (this._hubConnection is not null) {
            await this._hubConnection.DisposeAsync();
        }
    }

}