@page "/bulkdash"
@using MonitoringSystem.Shared.Data
@using MonitoringWeb.WebApp.Services
@using Microsoft.AspNetCore.SignalR.Client
@using MonitoringSystem.Shared.Services
@using MonitoringWeb.WebApp.Components.Bulkgas
@inject NavigationManager NavManager
@inject ISidepanelService SidepanelService
@inject BulkGasProvider BulkGasProvider
@implements IAsyncDisposable 

<style>
#sidepanel.is-open {
    width: 70%;
    background-color: #1f4671;
}

@@media (min-width: 768px) {
    #sidepanel.is-open {
        width: 50%;
    }
}
</style>

@if (this._bulkSettings !=null && this._bulkEmailSettings != null){
    <SidepanelComponent @ref="this._sidepanel" Title="Settings">
        <BulkGasSettingsComponent BulkSettings="@this._bulkSettings"
                                  BulkEmailSettings="@this._bulkEmailSettings"
                                  Saved="@this.SavedHandler"/>
    </SidepanelComponent>

    <div class="row float-end">
        <DxButton Click="Callback" 
                  RenderStyle="ButtonRenderStyle.Primary"
                  Text="@this._buttonText"/>
    </div>
    <div>
        <BulkStatus 
            H2Settings="@this._bulkSettings.H2Settings"
            N2Settings="@this._bulkSettings.N2Settings"
            NH3Settings="@this._bulkSettings.NHSettings"/>
    </div>
    <div class="row">
        <div class="col-6">
            <BulkGasDashPlot GasType="BulkGasType.H2" />
        </div>
        <div class="col-6">
            <BulkGasDashPlot GasType="BulkGasType.N2"/>
        </div>

    </div>
    <div class="row">
        <div class="col-12">
            <BulkGasDashPlot GasType="BulkGasType.NH3"/>
        </div>
    </div>
} @*else {
    <div class="w-100 d-flex flex-row justify-content-center">
        <h1>Error Loading.  Contact Andrew Elmendorf at 843-687-6812</h1>
    </div>
}*@




@code {

    private string _buttonText = "Open Settings";
    private WebsiteBulkSettings? _bulkSettings;
    private BulkEmailSettings? _bulkEmailSettings;
    private SidepanelComponent _sidepanel;
    private bool _isLoading=true;
    private Timer? _timer;
    
    private HubConnection? _hubConnection;
    private bool _isSender = false;
    
    public bool IsConnected =>
        this._hubConnection?.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync() {
        this._bulkSettings = await this.BulkGasProvider.GetSettings();
        this._bulkEmailSettings = await this.BulkGasProvider.GetEmailSettings();
        if (this._bulkSettings != null && this._bulkEmailSettings != null) {
            this._timer = new Timer(this.OnTimerAsync,
                null, 
                this._bulkSettings.RefreshTime, 
                this._bulkSettings.RefreshTime);
            this._hubConnection=new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri("/bulkgashub"))
                .Build();
            this._hubConnection.On("ReceiveRefreshRequest",this.ReceiveRefreshRequest);
            await this._hubConnection.StartAsync();
            this._isLoading = false;
        }
    }
    
    /*protected override void OnAfterRender(bool firstRender) {
        if (firstRender){
            var timer = new Timer(new TimerCallback(_ =>
            {
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            }), null, this._bulkSettings.RefreshTime,  this._bulkSettings.RefreshTime);
        }
    }*/
    
    private async void OnTimerAsync(object? state) {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
    

    private async void SavedHandler() {
        this._buttonText = "Open Settings";
        await this.SendRefreshRequest();
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private Task ReceiveRefreshRequest() {
        if (this._isSender) {
            this._isSender = false;
        } else {
            this.NavManager.NavigateTo(this.NavManager.Uri,forceLoad:true);
        }
        return Task.CompletedTask;
    }

    private async Task SendRefreshRequest() {
        if (this.IsConnected) {
            this._isSender = true;
            await this._hubConnection.SendAsync("SendRefreshRequest");
        }
    }

    private void Callback() {
        if (this.SidepanelService.IsOpen) {
            this._sidepanel.Close();
            this._buttonText = "Open Settings";
        } else {
            this._sidepanel.Open();
            this._buttonText = "Close Settings";
        }
    }

    public async ValueTask DisposeAsync() {
        if (this._hubConnection is not null) {
            await this._hubConnection.DisposeAsync();
        }
        if (this._timer is not null) {
            await this._timer.DisposeAsync();
        }
    }

}