@page "/liveview"
@using Microsoft.AspNetCore.SignalR.Client
@using MonitoringSystem.Shared.SignalR
@using MonitoringSystem.Shared.Data
@using MonitoringWeb.WebApp.Components
@using DevExpress.Blazor
@inject NavigationManager NavigationManager
@inject ILogger<LiveView> logger
@implements IAsyncDisposable

<DxTabs style="width:950px">
    <DxTabPage Text="Epi Lab 1">
        <p role="status">TimeStamp: @this.e1Data?.TimeStamp.ToLocalTime().ToString()</p>  
        <div class="row">
            <LiveGrid Data="@this.e1Data"></LiveGrid>
@*            <h1>Analog Channels</h1>
            @if (this.e1Data == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <DxGrid Data="@this.e1Data.analogData" 
                    title="Analog Channels" 
                    CssClass="my-class" 
                    ShowAllRows=true 
                    CustomizeElement="Grid_CustomizeElement">
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }*@
        </div>

        <div class="row">
            <br />
            <h1>Discrete Channels</h1>        
            @if (this.e1Data == null)
            {
                <p><em>Loading...</em></p>
            }else{
                <DxGrid Data="@this.e1Data.discreteData" CssClass="my-class" ShowAllRows=true>
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
        <div class="row">
            <br />
            <h1>Virtual Channels</h1>
            @if (this.e1Data == null){
                <p><em>Loading...</em></p>
            }else{
                <DxGrid Data="@this.e1Data.virtualData" title="Virtual Channels" CssClass="my-class" ShowAllRows=true>
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
    </DxTabPage>
   <DxTabPage Text="Epi Lab 2">
        <p role="status">TimeStamp: @this.e2Data?.TimeStamp.ToLocalTime().ToString()</p>     
        <div class="row">
            <br/>
            <h1>Analog Channels</h1>
            @if (this.e2Data == null){
                <p><em>Loading...</em></p>
            }
            else{
                <DxGrid Data="@this.e2Data.analogData" title="Analog Channels" CssClass="my-class" 
                ShowAllRows=true CustomizeElement="Grid_CustomizeElement">
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
        <div class="row">
            <br/>
            <h1>Discrete Channels</h1>
            @if (this.e2Data == null){
                <p><em>Loading...</em></p>
            }else{
                <DxGrid Data="@this.e2Data.discreteData" title="Discrete Channels" CssClass="my-class" ShowAllRows=true>
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
        <div class="row">
            <br />
            <h1>Virtual Channels</h1>
            @if (this.e2Data == null){
                <p><em>Loading...</em></p>
            }else{
                <DxGrid Data="@this.e2Data.virtualData" title="Virtual Channels" CssClass="my-class" ShowAllRows=true>
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
    </DxTabPage>
    <DxTabPage Text="Gas Bay">
        <p role="status">TimeStamp: @this.gasBayData?.TimeStamp.ToLocalTime().ToString()</p>     
        <div class="row">
            <br/>
            <h1>Analog Channels</h1>
            @if (this.gasBayData == null){
                <p><em>Loading...</em></p>
            }
            else{
                <DxGrid Data="@this.gasBayData.analogData" title="Analog Channels" CssClass="my-class" 
                ShowAllRows=true CustomizeElement="Grid_CustomizeElement">
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
        <div class="row">
            <br />
            <h1>Discrete Channels</h1>
            @if (this.gasBayData == null){
                <p><em>Loading...</em></p>
            }else{
                <DxGrid Data="@this.gasBayData.discreteData" title="Discrete Channels" CssClass="my-class" ShowAllRows=true>
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
        <div class="row">
            <br/>
            <h1>Virtual Channels</h1>
            @if (this.gasBayData == null){
                <p><em>Loading...</em></p>
            }else{
                <DxGrid Data="@this.gasBayData.virtualData" title="Virtual Channels" CssClass="my-class" ShowAllRows=true>
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
    </DxTabPage>
    <DxTabPage Text="NH3 Tanks">
        <p role="status">TimeStamp: @this.nhData?.TimeStamp.ToLocalTime().ToString()</p>     
        <div class="row">
            <br/>
            <h1>NH3 Data</h1>
            @if (this.nhData == null){
                <p><em>Loading...</em></p>
            }
            else{
                <DxGrid Data="@this.nhData.analogData" title="Analog Channels" CssClass="my-class" 
                ShowAllRows=true CustomizeElement="Grid_CustomizeElement">
                    <Columns>
                        <DxGridDataColumn FieldName="Item"/>
                        <DxGridDataColumn FieldName="State"/>
                        <DxGridDataColumn FieldName="Value"/>
                    </Columns>
                </DxGrid>
            }
        </div>
    </DxTabPage>
</DxTabs>
@code {
    private HubConnection? epi1Connection;
    private HubConnection? epi2Connection;
    private HubConnection? gasBayConnection;
    private HubConnection? nhConnection;
    private MonitorData? e1Data;
    private MonitorData? e2Data;
    private MonitorData? gasBayData;
    private MonitorData? nhData;
    private DateTime e1TimeStamp=DateTime.Now;
    private DateTime e2TimeStamp=DateTime.Now;
    private DateTime gasBayTimeStamp=DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        this.epi1Connection = new HubConnectionBuilder()
        .WithAutomaticReconnect()
        .WithUrl("http://e1streamv2/hubs/epi1streaming")
        .Build();

        this.epi2Connection = new HubConnectionBuilder()
        .WithAutomaticReconnect()
        .WithUrl("http://e2streamv2/hubs/epi2streaming")
        .Build();

        this.gasBayConnection=new HubConnectionBuilder()
        .WithAutomaticReconnect()
        .WithUrl("http://gbstream/hubs/gbstreaming")
        .Build();

        this.nhConnection=new HubConnectionBuilder()
        .WithAutomaticReconnect()
        .WithUrl("http://nhstream/hubs/nhstreaming")
        .Build();

        this.epi1Connection.On<MonitorData>("ShowCurrent", data =>{
            this.e1Data = data;
            InvokeAsync(StateHasChanged);
        });

        this.epi2Connection.On<MonitorData>("ShowCurrent", data => {
            this.e2Data=data;
            InvokeAsync(StateHasChanged);
        });

        this.gasBayConnection.On<MonitorData>("ShowCurrent", data => { 
            this.gasBayData=data;
            InvokeAsync(StateHasChanged);
        });

        this.nhConnection.On<MonitorData>("ShowCurrent", data => { 
            this.nhData=data;
            InvokeAsync(StateHasChanged);
        });

        this.epi1Connection.HandshakeTimeout = new TimeSpan(0, 0, 3);
        this.epi2Connection.HandshakeTimeout = new TimeSpan(0, 0, 3);
        this.gasBayConnection.HandshakeTimeout=new TimeSpan(0,0,3);
        this.nhConnection.HandshakeTimeout=new TimeSpan(0,0,3);

        this.epi1Connection.ServerTimeout = new TimeSpan(0, 0, 3);
        this.epi2Connection.ServerTimeout = new TimeSpan(0, 0, 3);
        this.gasBayConnection.ServerTimeout = new TimeSpan(0, 0, 3);
        this.nhConnection.ServerTimeout = new TimeSpan(0, 0, 3);

        try {
            await epi1Connection.StartAsync();
            this.logger.LogInformation("Epi1 Hub Connected");
        } catch {
            this.logger.LogError("Epi1 Hub Connection Failed");
        }

        try {
            await epi2Connection.StartAsync();
            this.logger.LogInformation("Epi2 Hub Connected");
        } catch {
            this.logger.LogError("Epi1 Hub Connection Failed");
        }

        try {
            await gasBayConnection.StartAsync();
            this.logger.LogInformation("GasBay Hub Connected");
        } catch {
            this.logger.LogError("GasBay Hub Connection Failed");
        }

        try {
            await nhConnection.StartAsync();
            this.logger.LogInformation("NH3 Hub Connected");
        } catch {
            this.logger.LogError("NH3 Hub Connection Failed");
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e) {
        if(e.ElementType == GridElementType.DataRow && (String)e.Grid.GetRowValue(e.VisibleIndex, "State")==ActionType.Alarm.ToString()) {
            e.CssClass = "alarm-item";
        }
        if(e.ElementType == GridElementType.DataRow && (String)e.Grid.GetRowValue(e.VisibleIndex, "State")==ActionType.Warning.ToString()) {
            e.CssClass = "alarm-item";
        }
    }

    public async ValueTask DisposeAsync(){

        if (this.epi1Connection is not null){
            await epi1Connection.DisposeAsync();
        }

        if(this.epi2Connection is not null) {
            await this.epi2Connection.DisposeAsync();
        }

        if(this.gasBayConnection is not null) {
            await this.gasBayConnection.DisposeAsync();
        }
    }
}