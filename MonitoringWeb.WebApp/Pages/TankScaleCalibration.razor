@page "/scalecal"
@using MonitoringSystem.Shared.Data.LogModel
@using MonitoringWeb.WebApp.Components.TankScales
@using MonitoringSystem.Shared.Services
@using MonitoringWeb.WebApp.Services
@inject ValueChanged<TankScale> TankScaleChanged
@inject AmmoniaDataService AmmoniaDataService
@inject AmmoniaController AmmoniaController
@inject WebsiteConfigurationProvider Provider
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>
    .icon-css{
        font-size: 100px;
    }
</style>

<div class="row d-flex justify-content-center">
    @foreach (var scale in this._scales) {
        <div class="col-3 shadow-lg p-2 mb-5 rounded">
            <TS_StatusCard TankScale="@scale" OnClick="@this.TankScaleClickHandler"/>
        </div>
    }
</div>
<div class="row">
    @if (this._selectedTankScale == null) {
        <h3>No Tank Selected</h3>
    } else {
        <DxTabs TabsPosition="TabsPosition.Top">
            <DxTabPage Text="NH3 Tank">
                <div class="w-75 position-relative top-50 start-50 translate-middle p-2">
                    <TankView TankScale="@this._selectedTankScale"/>
                </div>
            </DxTabPage>
            <DxTabPage Text="Scale">
                <div class="w-75 position-relative top-50 start-50 translate-middle p-2">
                    <ScaleView TankScale="@this._selectedTankScale"/>
                </div>
            </DxTabPage>
        </DxTabs>
    }
</div>


@code {
    private int _tabIndex;
    private DxAccordion _accordion;
    private TankScale? _selectedTankScale;
    private List<TankScale> _scales = new List<TankScale>();
    
  
    protected override async Task OnInitializedAsync() {
        this.TankScaleChanged.OnChildChanged += this.TankScaleChangedHandler;
        this._scales = await this.AmmoniaDataService.GetTankScales();
    }

    private Task TankScaleClickHandler(int tankScale) {
        this._selectedTankScale=this._scales.FirstOrDefault(e => e.ScaleId == tankScale);
        return Task.CompletedTask;
    }

    private async Task TankScaleChangedHandler() {
        //this.NavigationManager.NavigateTo(this.NavigationManager.Uri,forceLoad:true);
        this._scales = await this.AmmoniaDataService.GetTankScales();
        await InvokeAsync(StateHasChanged);
    }
    

    public ValueTask DisposeAsync() {
        this.TankScaleChanged.OnChildChanged -= this.TankScaleChangedHandler;
        return ValueTask.CompletedTask;
    }
}