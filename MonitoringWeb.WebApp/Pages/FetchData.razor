@page "/fetchdata"
@using MonitoringData.Infrastructure.Services.DataAccess
@using Blazor.DownloadFileFast.Interfaces
@inject IJSRuntime JSRuntime
<style> 
    #small-indicator, #medium-indicator, #large-indicator {
        vertical-align: middle;
        margin-right: 10px;
    }
</style>


<h3>FetchData</h3>
<DxCalendar T="DateTime" @bind-SelectedDate="@start"  />
<DxCalendar T="DateTime" @bind-SelectedDate="@stop"  />
<DxButton Click="@Download" RenderStyle="ButtonRenderStyle.Primary" 
    RenderStyleMode="ButtonRenderStyleMode.Contained" 
    Text="Primary" />
<DxPopup HeaderText="File Downloading"
    @bind-Visible="@PopupVisible">
    <BodyTemplate>
        <div>
            <p>Downloading, Please Wait...</p>
            <div id="loadingid"></div>
        </div>
    </BodyTemplate>
</DxPopup>
@code {
    [Inject]
    public DataDownload? downloadHelper { get; set; }

    [Inject]
    public IBlazorDownloadFileService? BlazorDownloadFileService { get; set; }

    DateTime start{ get; set; }
    DateTime stop{ get; set; }
    bool PopupVisible { get; set; }

    protected override void OnInitialized() {
        DateTime currentDateTime = DateTime.Now;
        this.start=DateTime.Now;
        this.stop = DateTime.Now;
    }

   protected override async Task OnAfterRenderAsync(bool firstRender) {
       await JSRuntime.InvokeVoidAsync("renderDevExtremeControls", "#loadingid");
   }

    public async Task Download(MouseEventArgs mouseEventArgs) {
        this.PopupVisible = true;
        var data=await this.downloadHelper.GetData(this.start, this.stop);
        await this.BlazorDownloadFileService.DownloadFileAsync("data.csv", data);
        this.PopupVisible = false;
    }
}
