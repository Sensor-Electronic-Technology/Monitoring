@page "/bulkgas/{GasType:int}"
@using MonitoringWeb.WebApp.Data
@using MonitoringWeb.WebApp.Services
@inject ValueChanged<BulkGasType> GasTypeChanged
@inject NavigationManager uriHelper;

<h3 class="text-center">@this.Header</h3>
<DxTabs RenderMode="TabsRenderMode.Default" @bind-ActiveTabIndex="tabIndex">
    <DxTabPage Text="Plot">
        <BulkGasPlot GasType="@this.GasType" />
    </DxTabPage>
    <DxTabPage Text="Consumption">
        <UsageTable GasType="@this.GasType"/>
    </DxTabPage>
</DxTabs>

@code {
    [Parameter]
    public BulkGasType GasType { get; set; }

    int tabIndex = 1;

    string Header = "";
    Decimal YaxisMax;

    protected override Task OnInitializedAsync() {
        switch (this.GasType) {
            case BulkGasType.N2:
                this.Header = "Bulk N2 ";
                break;
            case BulkGasType.H2:
                this.Header = "Bulk H2";
                break;
            case BulkGasType.NH3:
                this.Header = "Bulk NH3";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        this.tabIndex = 0;
        return Task.CompletedTask;
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender){
            var timer = new Timer(new TimerCallback(_ =>
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }), null, 30000, 30000);
        }
    }
    
    public override async Task SetParametersAsync(ParameterView parameters) {
        await base.SetParametersAsync(parameters);
        switch (this.GasType) {
            case BulkGasType.N2:
                this.Header = "Bulk N2 ";
                break;
            case BulkGasType.H2:
                this.Header = "Bulk H2";
                break;
            case BulkGasType.NH3:
                this.Header = "Bulk NH3";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        this.tabIndex = 0;
        await InvokeAsync(StateHasChanged);
    }

}