@inherits LayoutComponentBase
@using MonitoringWeb.WebApp.Components
@inject NavigationManager NavigationManager

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />

<div class="page">
    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if (IsMobileLayout) {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content"/>
            } else {
                <DxGridLayoutRow Areas="header header header" Height="auto"/>
                if (IsSidebarExpanded && !this.controlPaneVisible) {
                    <DxGridLayoutRow Areas="sidebar content content" />
                }else if (IsSidebarExpanded && this.controlPaneVisible) {
                    <DxGridLayoutRow Areas="sidebar content lsidepane" />
                }else if (!IsSidebarExpanded && this.controlPaneVisible) {
                    <DxGridLayoutRow Areas="content content lsidepane" />
                } else {
                    <DxGridLayoutRow Areas="content content content" />
                }
                @*<DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content lsidepane" : "content content lsidepane")"/>*@
            }
        </Rows>
        <Columns>
            @if (!IsMobileLayout) {
                <DxGridLayoutColumn Width="auto"/>
                <DxGridLayoutColumn/>
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" @bind-Active=@controlPaneVisible />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                <Template>
                    <NavMenu StateCssClass="@NavMenuCssClass"/>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item">
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="lsidepane" CssClass="layout-item">
                <Template>
                    <div id="settingsbar"  class="@(controlPaneVisible ? "" : "hidden-settings-bar")">
                        <ControlSidePane @bind-Visible="@controlPaneVisible" />
                    </div>
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
</div>

@code{
    string? NavMenuCssClass { get; set; }
    bool controlPaneVisible;
    bool _isMobileLayout;
    bool IsMobileLayout {
        get => _isMobileLayout;
        set {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded {
        get => _isSidebarExpanded;
        set {
            if(_isSidebarExpanded != value) {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    protected override void OnInitialized() {
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) {
        if(IsMobileLayout) {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}